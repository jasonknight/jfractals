var L = [];
L[ 1 ] = [];
L[ 1 ][ 1 ] = [];
L[ 1 ][ 2 ] = [];
L[ 1 ][ 3 ] = [];
L[ 1 ][ 4 ] = [];
L[ 2 ] = [];
L[ 2 ][ 1 ] = [];
L[ 2 ][ 2 ] = [];
L[ 2 ][ 3 ] = [];
L[ 2 ][ 4 ] = [];
L[ 3 ] = [];
L[ 3 ][ 1 ] = [];
L[ 3 ][ 2 ] = [];
L[ 3 ][ 3 ] = [];
L[ 3 ][ 4 ] = [];
L[ 4 ] = [];
L[ 4 ][ 1 ] = [];
L[ 4 ][ 2 ] = [];
L[ 4 ][ 3 ] = [];
L[ 4 ][ 4 ] = [];
L[ 5 ] = [];
L[ 5 ][ 1 ] = [];
L[ 5 ][ 2 ] = [];
L[ 5 ][ 3 ] = [];
L[ 5 ][ 4 ] = [];
L[ 6 ] = [];
L[ 6 ][ 1 ] = [];
L[ 6 ][ 2 ] = [];
L[ 6 ][ 3 ] = [];
L[ 6 ][ 4 ] = [];
L[ 7 ] = [];
L[ 7 ][ 1 ] = [];
L[ 7 ][ 2 ] = [];
L[ 7 ][ 3 ] = [];
L[ 7 ][ 4 ] = [];
L[ 8 ] = [];
L[ 8 ][ 1 ] = [];
L[ 8 ][ 2 ] = [];
L[ 8 ][ 3 ] = [];
L[ 8 ][ 4 ] = [];
L[ 9 ] = [];
L[ 9 ][ 1 ] = [];
L[ 9 ][ 2 ] = [];
L[ 9 ][ 3 ] = [];
L[ 9 ][ 4 ] = [];
L[ 10 ] = [];
L[ 10 ][ 1 ] = [];
L[ 10 ][ 2 ] = [];
L[ 10 ][ 3 ] = [];
L[ 10 ][ 4 ] = [];
L[ 11 ] = [];
L[ 11 ][ 1 ] = [];
L[ 11 ][ 2 ] = [];
L[ 11 ][ 3 ] = [];
L[ 11 ][ 4 ] = [];
L[ 12 ] = [];
L[ 12 ][ 1 ] = [];
L[ 12 ][ 2 ] = [];
L[ 12 ][ 3 ] = [];
L[ 12 ][ 4 ] = [];
L[ 13 ] = [];
L[ 13 ][ 1 ] = [];
L[ 13 ][ 2 ] = [];
L[ 13 ][ 3 ] = [];
L[ 13 ][ 4 ] = [];
L[ 14 ] = [];
L[ 14 ][ 1 ] = [];
L[ 14 ][ 2 ] = [];
L[ 14 ][ 3 ] = [];
L[ 14 ][ 4 ] = [];
L[ 15 ] = [];
L[ 15 ][ 1 ] = [];
L[ 15 ][ 2 ] = [];
L[ 15 ][ 3 ] = [];
L[ 15 ][ 4 ] = [];
L[ 16 ] = [];
L[ 16 ][ 1 ] = [];
L[ 16 ][ 2 ] = [];
L[ 16 ][ 3 ] = [];
L[ 16 ][ 4 ] = [];
L[ 17 ] = [];
L[ 17 ][ 1 ] = [];
L[ 17 ][ 2 ] = [];
L[ 17 ][ 3 ] = [];
L[ 17 ][ 4 ] = [];
L[ 18 ] = [];
L[ 18 ][ 1 ] = [];
L[ 18 ][ 2 ] = [];
L[ 18 ][ 3 ] = [];
L[ 18 ][ 4 ] = [];
L[ 19 ] = [];
L[ 19 ][ 1 ] = [];
L[ 19 ][ 2 ] = [];
L[ 19 ][ 3 ] = [];
L[ 19 ][ 4 ] = [];
L[ 20 ] = [];
L[ 20 ][ 1 ] = [];
L[ 20 ][ 2 ] = [];
L[ 20 ][ 3 ] = [];
L[ 20 ][ 4 ] = [];
L[ 21 ] = [];
L[ 21 ][ 1 ] = [];
L[ 21 ][ 2 ] = [];
L[ 21 ][ 3 ] = [];
L[ 21 ][ 4 ] = [];
L[ 22 ] = [];
L[ 22 ][ 1 ] = [];
L[ 22 ][ 2 ] = [];
L[ 22 ][ 3 ] = [];
L[ 22 ][ 4 ] = [];
L[ 23 ] = [];
L[ 23 ][ 1 ] = [];
L[ 23 ][ 2 ] = [];
L[ 23 ][ 3 ] = [];
L[ 23 ][ 4 ] = [];
L[ 24 ] = [];
L[ 24 ][ 1 ] = [];
L[ 24 ][ 2 ] = [];
L[ 24 ][ 3 ] = [];
L[ 24 ][ 4 ] = [];
function populateMatrices( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0;
	L[ 1 ][ 1 ][ 4 ] = 0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = 0;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0;
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = ( 5.0 + 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = ( -1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 1.0;
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = 0;
	L[ 2 ][ 3 ][ 1 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = ( -1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0;
	L[ 2 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 4 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 1 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 4 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 1 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 2 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 4 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 3 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 4 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 4 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 1 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 3 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 4 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 1 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 2 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 4 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 1 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 3 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 4 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 1 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 2 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 4 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 1 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 3 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 4 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 1 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 2 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 1 ] = ( 5.0 + 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 2 ] = 0;
	L[ 10 ][ 1 ][ 3 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 4 ] = ( 1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 1 ] = 0;
	L[ 10 ][ 2 ][ 2 ] = 1.0;
	L[ 10 ][ 2 ][ 3 ] = 0;
	L[ 10 ][ 2 ][ 4 ] = 0;
	L[ 10 ][ 3 ][ 1 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 2 ] = 0;
	L[ 10 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 1 ] = ( 1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 2 ] = 0;
	L[ 10 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 4 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 1 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 3 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 4 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 1 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 2 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 1 ] = 1.0;
	L[ 12 ][ 1 ][ 2 ] = 0;
	L[ 12 ][ 1 ][ 3 ] = 0;
	L[ 12 ][ 1 ][ 4 ] = 0;
	L[ 12 ][ 2 ][ 1 ] = 0;
	L[ 12 ][ 2 ][ 2 ] = 1.0;
	L[ 12 ][ 2 ][ 3 ] = 0;
	L[ 12 ][ 2 ][ 4 ] = 0;
	L[ 12 ][ 3 ][ 1 ] = 0;
	L[ 12 ][ 3 ][ 2 ] = 0;
	L[ 12 ][ 3 ][ 3 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 1 ] = 0;
	L[ 12 ][ 4 ][ 2 ] = 0;
	L[ 12 ][ 4 ][ 3 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 4 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
}
function populateMatricesOcta( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0;
	L[ 1 ][ 1 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = 0;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = 1.0;
	L[ 1 ][ 3 ][ 4 ] = 0;
	L[ 1 ][ 4 ][ 1 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = 0;
	L[ 1 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 1.0;
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0;
	L[ 2 ][ 1 ][ 4 ] = 0;
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 1 ] = 0;
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = 1.0;
	L[ 2 ][ 3 ][ 4 ] = 0;
	L[ 2 ][ 4 ][ 1 ] = 0;
	L[ 2 ][ 4 ][ 2 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 3 ] = 0;
	L[ 2 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = 1.0;
	L[ 3 ][ 1 ][ 2 ] = 0;
	L[ 3 ][ 1 ][ 3 ] = 0;
	L[ 3 ][ 1 ][ 4 ] = 0;
	L[ 3 ][ 2 ][ 1 ] = 0;
	L[ 3 ][ 2 ][ 2 ] = 1.0;
	L[ 3 ][ 2 ][ 3 ] = 0;
	L[ 3 ][ 2 ][ 4 ] = 0;
	L[ 3 ][ 3 ][ 1 ] = 0;
	L[ 3 ][ 3 ][ 2 ] = 0;
	L[ 3 ][ 3 ][ 3 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0;
	L[ 3 ][ 4 ][ 2 ] = 0;
	L[ 3 ][ 4 ][ 3 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = 1.0;
	L[ 4 ][ 1 ][ 2 ] = 0;
	L[ 4 ][ 1 ][ 3 ] = 0;
	L[ 4 ][ 1 ][ 4 ] = 0;
	L[ 4 ][ 2 ][ 1 ] = 0;
	L[ 4 ][ 2 ][ 2 ] = 1.0;
	L[ 4 ][ 2 ][ 3 ] = 0;
	L[ 4 ][ 2 ][ 4 ] = 0;
	L[ 4 ][ 3 ][ 1 ] = 0;
	L[ 4 ][ 3 ][ 2 ] = 0;
	L[ 4 ][ 3 ][ 3 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0;
	L[ 4 ][ 4 ][ 2 ] = 0;
	L[ 4 ][ 4 ][ 3 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = 1.0;
	L[ 5 ][ 1 ][ 2 ] = 0;
	L[ 5 ][ 1 ][ 3 ] = 0;
	L[ 5 ][ 1 ][ 4 ] = 0;
	L[ 5 ][ 2 ][ 1 ] = 0;
	L[ 5 ][ 2 ][ 2 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0;
	L[ 5 ][ 2 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0;
	L[ 5 ][ 3 ][ 2 ] = 0;
	L[ 5 ][ 3 ][ 3 ] = 1.0;
	L[ 5 ][ 3 ][ 4 ] = 0;
	L[ 5 ][ 4 ][ 1 ] = 0;
	L[ 5 ][ 4 ][ 2 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = 0;
	L[ 5 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = 0;
	L[ 6 ][ 1 ][ 3 ] = 0;
	L[ 6 ][ 1 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = 0;
	L[ 6 ][ 2 ][ 2 ] = 1.0;
	L[ 6 ][ 2 ][ 3 ] = 0;
	L[ 6 ][ 2 ][ 4 ] = 0;
	L[ 6 ][ 3 ][ 1 ] = 0;
	L[ 6 ][ 3 ][ 2 ] = 0;
	L[ 6 ][ 3 ][ 3 ] = 1.0;
	L[ 6 ][ 3 ][ 4 ] = 0;
	L[ 6 ][ 4 ][ 1 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = 0;
	L[ 6 ][ 4 ][ 3 ] = 0;
	L[ 6 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
}
function populateMatricesPara( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = -4.0;
	L[ 1 ][ 1 ][ 4 ] = 4.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = 4.0;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = -7.0;
	L[ 1 ][ 3 ][ 4 ] = 8.0;
	L[ 1 ][ 4 ][ 1 ] = 4.0;
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = -8.0;
	L[ 1 ][ 4 ][ 4 ] = 9.0;
	L[ 2 ][ 1 ][ 1 ] = 1.0;
	L[ 2 ][ 1 ][ 2 ] = -4.0;
	L[ 2 ][ 1 ][ 3 ] = 0;
	L[ 2 ][ 1 ][ 4 ] = 4.0;
	L[ 2 ][ 2 ][ 1 ] = 4.0;
	L[ 2 ][ 2 ][ 2 ] = -7.0;
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = 8.0;
	L[ 2 ][ 3 ][ 1 ] = 0;
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = 1.0;
	L[ 2 ][ 3 ][ 4 ] = 0;
	L[ 2 ][ 4 ][ 1 ] = 4.0;
	L[ 2 ][ 4 ][ 2 ] = -8.0;
	L[ 2 ][ 4 ][ 3 ] = 0;
	L[ 2 ][ 4 ][ 4 ] = 9.0;
	L[ 3 ][ 1 ][ 1 ] = 1.0;
	L[ 3 ][ 1 ][ 2 ] = 4.0;
	L[ 3 ][ 1 ][ 3 ] = 0;
	L[ 3 ][ 1 ][ 4 ] = 4.0;
	L[ 3 ][ 2 ][ 1 ] = -4.0;
	L[ 3 ][ 2 ][ 2 ] = -7.0;
	L[ 3 ][ 2 ][ 3 ] = 0;
	L[ 3 ][ 2 ][ 4 ] = -8.0;
	L[ 3 ][ 3 ][ 1 ] = 0;
	L[ 3 ][ 3 ][ 2 ] = 0;
	L[ 3 ][ 3 ][ 3 ] = 1.0;
	L[ 3 ][ 3 ][ 4 ] = 0;
	L[ 3 ][ 4 ][ 1 ] = 4.0;
	L[ 3 ][ 4 ][ 2 ] = 8.0;
	L[ 3 ][ 4 ][ 3 ] = 0;
	L[ 3 ][ 4 ][ 4 ] = 9.0;
	L[ 4 ][ 1 ][ 1 ] = 1.0;
	L[ 4 ][ 1 ][ 2 ] = 0;
	L[ 4 ][ 1 ][ 3 ] = 4.0;
	L[ 4 ][ 1 ][ 4 ] = 4.0;
	L[ 4 ][ 2 ][ 1 ] = 0;
	L[ 4 ][ 2 ][ 2 ] = 1.0;
	L[ 4 ][ 2 ][ 3 ] = 0;
	L[ 4 ][ 2 ][ 4 ] = 0;
	L[ 4 ][ 3 ][ 1 ] = -4.0;
	L[ 4 ][ 3 ][ 2 ] = 0;
	L[ 4 ][ 3 ][ 3 ] = -7.0;
	L[ 4 ][ 3 ][ 4 ] = -8.0;
	L[ 4 ][ 4 ][ 1 ] = 4.0;
	L[ 4 ][ 4 ][ 2 ] = 0;
	L[ 4 ][ 4 ][ 3 ] = 8.0;
	L[ 4 ][ 4 ][ 4 ] = 9.0;
	L[ 5 ][ 1 ][ 1 ] = 1.0;
	L[ 5 ][ 1 ][ 2 ] = 0;
	L[ 5 ][ 1 ][ 3 ] = 0;
	L[ 5 ][ 1 ][ 4 ] = 0;
	L[ 5 ][ 2 ][ 1 ] = 0;
	L[ 5 ][ 2 ][ 2 ] = 1.0;
	L[ 5 ][ 2 ][ 3 ] = 4.0;
	L[ 5 ][ 2 ][ 4 ] = 4.0;
	L[ 5 ][ 3 ][ 1 ] = 0;
	L[ 5 ][ 3 ][ 2 ] = -4.0;
	L[ 5 ][ 3 ][ 3 ] = -7.0;
	L[ 5 ][ 3 ][ 4 ] = -8.0;
	L[ 5 ][ 4 ][ 1 ] = 0;
	L[ 5 ][ 4 ][ 2 ] = 4.0;
	L[ 5 ][ 4 ][ 3 ] = 8.0;
	L[ 5 ][ 4 ][ 4 ] = 9.0;
	L[ 6 ][ 1 ][ 1 ] = 1.0;
	L[ 6 ][ 1 ][ 2 ] = 0;
	L[ 6 ][ 1 ][ 3 ] = 0;
	L[ 6 ][ 1 ][ 4 ] = 0;
	L[ 6 ][ 2 ][ 1 ] = 0;
	L[ 6 ][ 2 ][ 2 ] = -7.0;
	L[ 6 ][ 2 ][ 3 ] = 4.0;
	L[ 6 ][ 2 ][ 4 ] = 8.0;
	L[ 6 ][ 3 ][ 1 ] = 0;
	L[ 6 ][ 3 ][ 2 ] = -4.0;
	L[ 6 ][ 3 ][ 3 ] = 1.0;
	L[ 6 ][ 3 ][ 4 ] = 4.0;
	L[ 6 ][ 4 ][ 1 ] = 0;
	L[ 6 ][ 4 ][ 2 ] = -8.0;
	L[ 6 ][ 4 ][ 3 ] = 4.0;
	L[ 6 ][ 4 ][ 4 ] = 9.0;
	L[ 7 ][ 1 ][ 1 ] = 1.0;
	L[ 7 ][ 1 ][ 2 ] = 0;
	L[ 7 ][ 1 ][ 3 ] = 0;
	L[ 7 ][ 1 ][ 4 ] = 0;
	L[ 7 ][ 2 ][ 1 ] = 0;
	L[ 7 ][ 2 ][ 2 ] = -7.0;
	L[ 7 ][ 2 ][ 3 ] = 4.0;
	L[ 7 ][ 2 ][ 4 ] = -8.0;
	L[ 7 ][ 3 ][ 1 ] = 0;
	L[ 7 ][ 3 ][ 2 ] = -4.0;
	L[ 7 ][ 3 ][ 3 ] = 1.0;
	L[ 7 ][ 3 ][ 4 ] = -4.0;
	L[ 7 ][ 4 ][ 1 ] = 0;
	L[ 7 ][ 4 ][ 2 ] = 8.0;
	L[ 7 ][ 4 ][ 3 ] = -4.0;
	L[ 7 ][ 4 ][ 4 ] = 9.0;
	L[ 8 ][ 1 ][ 1 ] = 1.0;
	L[ 8 ][ 1 ][ 2 ] = 0;
	L[ 8 ][ 1 ][ 3 ] = 0;
	L[ 8 ][ 1 ][ 4 ] = 0;
	L[ 8 ][ 2 ][ 1 ] = 0;
	L[ 8 ][ 2 ][ 2 ] = 1.0;
	L[ 8 ][ 2 ][ 3 ] = 4.0;
	L[ 8 ][ 2 ][ 4 ] = -4.0;
	L[ 8 ][ 3 ][ 1 ] = 0;
	L[ 8 ][ 3 ][ 2 ] = -4.0;
	L[ 8 ][ 3 ][ 3 ] = -7.0;
	L[ 8 ][ 3 ][ 4 ] = 8.0;
	L[ 8 ][ 4 ][ 1 ] = 0;
	L[ 8 ][ 4 ][ 2 ] = -4.0;
	L[ 8 ][ 4 ][ 3 ] = -8.0;
	L[ 8 ][ 4 ][ 4 ] = 9.0;
	L[ 9 ][ 1 ][ 1 ] = -7.0;
	L[ 9 ][ 1 ][ 2 ] = 4.0;
	L[ 9 ][ 1 ][ 3 ] = 0;
	L[ 9 ][ 1 ][ 4 ] = 8.0;
	L[ 9 ][ 2 ][ 1 ] = -4.0;
	L[ 9 ][ 2 ][ 2 ] = 1.0;
	L[ 9 ][ 2 ][ 3 ] = 0;
	L[ 9 ][ 2 ][ 4 ] = 4.0;
	L[ 9 ][ 3 ][ 1 ] = 0;
	L[ 9 ][ 3 ][ 2 ] = 0;
	L[ 9 ][ 3 ][ 3 ] = 1.0;
	L[ 9 ][ 3 ][ 4 ] = 0;
	L[ 9 ][ 4 ][ 1 ] = -8.0;
	L[ 9 ][ 4 ][ 2 ] = 4.0;
	L[ 9 ][ 4 ][ 3 ] = 0;
	L[ 9 ][ 4 ][ 4 ] = 9.0;
	L[ 10 ][ 1 ][ 1 ] = -7.0;
	L[ 10 ][ 1 ][ 2 ] = 0;
	L[ 10 ][ 1 ][ 3 ] = -4.0;
	L[ 10 ][ 1 ][ 4 ] = 8.0;
	L[ 10 ][ 2 ][ 1 ] = 0;
	L[ 10 ][ 2 ][ 2 ] = 1.0;
	L[ 10 ][ 2 ][ 3 ] = 0;
	L[ 10 ][ 2 ][ 4 ] = 0;
	L[ 10 ][ 3 ][ 1 ] = 4.0;
	L[ 10 ][ 3 ][ 2 ] = 0;
	L[ 10 ][ 3 ][ 3 ] = 1.0;
	L[ 10 ][ 3 ][ 4 ] = -4.0;
	L[ 10 ][ 4 ][ 1 ] = -8.0;
	L[ 10 ][ 4 ][ 2 ] = 0;
	L[ 10 ][ 4 ][ 3 ] = -4.0;
	L[ 10 ][ 4 ][ 4 ] = 9.0;
	L[ 11 ][ 1 ][ 1 ] = -7.0;
	L[ 11 ][ 1 ][ 2 ] = -4.0;
	L[ 11 ][ 1 ][ 3 ] = 0;
	L[ 11 ][ 1 ][ 4 ] = -8.0;
	L[ 11 ][ 2 ][ 1 ] = 4.0;
	L[ 11 ][ 2 ][ 2 ] = 1.0;
	L[ 11 ][ 2 ][ 3 ] = 0;
	L[ 11 ][ 2 ][ 4 ] = 4.0;
	L[ 11 ][ 3 ][ 1 ] = 0;
	L[ 11 ][ 3 ][ 2 ] = 0;
	L[ 11 ][ 3 ][ 3 ] = 1.0;
	L[ 11 ][ 3 ][ 4 ] = 0;
	L[ 11 ][ 4 ][ 1 ] = 8.0;
	L[ 11 ][ 4 ][ 2 ] = 4.0;
	L[ 11 ][ 4 ][ 3 ] = 0;
	L[ 11 ][ 4 ][ 4 ] = 9.0;
	L[ 12 ][ 1 ][ 1 ] = -7.0;
	L[ 12 ][ 1 ][ 2 ] = 0;
	L[ 12 ][ 1 ][ 3 ] = -4.0;
	L[ 12 ][ 1 ][ 4 ] = -8.0;
	L[ 12 ][ 2 ][ 1 ] = 0;
	L[ 12 ][ 2 ][ 2 ] = 1.0;
	L[ 12 ][ 2 ][ 3 ] = 0;
	L[ 12 ][ 2 ][ 4 ] = 0;
	L[ 12 ][ 3 ][ 1 ] = 4.0;
	L[ 12 ][ 3 ][ 2 ] = 0;
	L[ 12 ][ 3 ][ 3 ] = 1.0;
	L[ 12 ][ 3 ][ 4 ] = 4.0;
	L[ 12 ][ 4 ][ 1 ] = 8.0;
	L[ 12 ][ 4 ][ 2 ] = 0;
	L[ 12 ][ 4 ][ 3 ] = 4.0;
	L[ 12 ][ 4 ][ 4 ] = 9.0;
	L[ 13 ][ 1 ][ 1 ] = -7.0;
	L[ 13 ][ 1 ][ 2 ] = 0;
	L[ 13 ][ 1 ][ 3 ] = 4.0;
	L[ 13 ][ 1 ][ 4 ] = -8.0;
	L[ 13 ][ 2 ][ 1 ] = 0;
	L[ 13 ][ 2 ][ 2 ] = 1.0;
	L[ 13 ][ 2 ][ 3 ] = 0;
	L[ 13 ][ 2 ][ 4 ] = 0;
	L[ 13 ][ 3 ][ 1 ] = -4.0;
	L[ 13 ][ 3 ][ 2 ] = 0;
	L[ 13 ][ 3 ][ 3 ] = 1.0;
	L[ 13 ][ 3 ][ 4 ] = -4.0;
	L[ 13 ][ 4 ][ 1 ] = 8.0;
	L[ 13 ][ 4 ][ 2 ] = 0;
	L[ 13 ][ 4 ][ 3 ] = -4.0;
	L[ 13 ][ 4 ][ 4 ] = 9.0;
	L[ 14 ][ 1 ][ 1 ] = -7.0;
	L[ 14 ][ 1 ][ 2 ] = 4.0;
	L[ 14 ][ 1 ][ 3 ] = 0;
	L[ 14 ][ 1 ][ 4 ] = -8.0;
	L[ 14 ][ 2 ][ 1 ] = -4.0;
	L[ 14 ][ 2 ][ 2 ] = 1.0;
	L[ 14 ][ 2 ][ 3 ] = 0;
	L[ 14 ][ 2 ][ 4 ] = -4.0;
	L[ 14 ][ 3 ][ 1 ] = 0;
	L[ 14 ][ 3 ][ 2 ] = 0;
	L[ 14 ][ 3 ][ 3 ] = 1.0;
	L[ 14 ][ 3 ][ 4 ] = 0;
	L[ 14 ][ 4 ][ 1 ] = 8.0;
	L[ 14 ][ 4 ][ 2 ] = -4.0;
	L[ 14 ][ 4 ][ 3 ] = 0;
	L[ 14 ][ 4 ][ 4 ] = 9.0;
	L[ 15 ][ 1 ][ 1 ] = -7.0;
	L[ 15 ][ 1 ][ 2 ] = 0;
	L[ 15 ][ 1 ][ 3 ] = 4.0;
	L[ 15 ][ 1 ][ 4 ] = 8.0;
	L[ 15 ][ 2 ][ 1 ] = 0;
	L[ 15 ][ 2 ][ 2 ] = 1.0;
	L[ 15 ][ 2 ][ 3 ] = 0;
	L[ 15 ][ 2 ][ 4 ] = 0;
	L[ 15 ][ 3 ][ 1 ] = -4.0;
	L[ 15 ][ 3 ][ 2 ] = 0;
	L[ 15 ][ 3 ][ 3 ] = 1.0;
	L[ 15 ][ 3 ][ 4 ] = 4.0;
	L[ 15 ][ 4 ][ 1 ] = -8.0;
	L[ 15 ][ 4 ][ 2 ] = 0;
	L[ 15 ][ 4 ][ 3 ] = 4.0;
	L[ 15 ][ 4 ][ 4 ] = 9.0;
	L[ 16 ][ 1 ][ 1 ] = -7.0;
	L[ 16 ][ 1 ][ 2 ] = -4.0;
	L[ 16 ][ 1 ][ 3 ] = 0;
	L[ 16 ][ 1 ][ 4 ] = 8.0;
	L[ 16 ][ 2 ][ 1 ] = 4.0;
	L[ 16 ][ 2 ][ 2 ] = 1.0;
	L[ 16 ][ 2 ][ 3 ] = 0;
	L[ 16 ][ 2 ][ 4 ] = -4.0;
	L[ 16 ][ 3 ][ 1 ] = 0;
	L[ 16 ][ 3 ][ 2 ] = 0;
	L[ 16 ][ 3 ][ 3 ] = 1.0;
	L[ 16 ][ 3 ][ 4 ] = 0;
	L[ 16 ][ 4 ][ 1 ] = -8.0;
	L[ 16 ][ 4 ][ 2 ] = -4.0;
	L[ 16 ][ 4 ][ 3 ] = 0;
	L[ 16 ][ 4 ][ 4 ] = 9.0;
	L[ 17 ][ 1 ][ 1 ] = 1.0;
	L[ 17 ][ 1 ][ 2 ] = 0;
	L[ 17 ][ 1 ][ 3 ] = 0;
	L[ 17 ][ 1 ][ 4 ] = 0;
	L[ 17 ][ 2 ][ 1 ] = 0;
	L[ 17 ][ 2 ][ 2 ] = 1.0;
	L[ 17 ][ 2 ][ 3 ] = -4.0;
	L[ 17 ][ 2 ][ 4 ] = 4.0;
	L[ 17 ][ 3 ][ 1 ] = 0;
	L[ 17 ][ 3 ][ 2 ] = 4.0;
	L[ 17 ][ 3 ][ 3 ] = -7.0;
	L[ 17 ][ 3 ][ 4 ] = 8.0;
	L[ 17 ][ 4 ][ 1 ] = 0;
	L[ 17 ][ 4 ][ 2 ] = 4.0;
	L[ 17 ][ 4 ][ 3 ] = -8.0;
	L[ 17 ][ 4 ][ 4 ] = 9.0;
	L[ 18 ][ 1 ][ 1 ] = 1.0;
	L[ 18 ][ 1 ][ 2 ] = 0;
	L[ 18 ][ 1 ][ 3 ] = 0;
	L[ 18 ][ 1 ][ 4 ] = 0;
	L[ 18 ][ 2 ][ 1 ] = 0;
	L[ 18 ][ 2 ][ 2 ] = -7.0;
	L[ 18 ][ 2 ][ 3 ] = -4.0;
	L[ 18 ][ 2 ][ 4 ] = -8.0;
	L[ 18 ][ 3 ][ 1 ] = 0;
	L[ 18 ][ 3 ][ 2 ] = 4.0;
	L[ 18 ][ 3 ][ 3 ] = 1.0;
	L[ 18 ][ 3 ][ 4 ] = 4.0;
	L[ 18 ][ 4 ][ 1 ] = 0;
	L[ 18 ][ 4 ][ 2 ] = 8.0;
	L[ 18 ][ 4 ][ 3 ] = 4.0;
	L[ 18 ][ 4 ][ 4 ] = 9.0;
	L[ 19 ][ 1 ][ 1 ] = 1.0;
	L[ 19 ][ 1 ][ 2 ] = 0;
	L[ 19 ][ 1 ][ 3 ] = 0;
	L[ 19 ][ 1 ][ 4 ] = 0;
	L[ 19 ][ 2 ][ 1 ] = 0;
	L[ 19 ][ 2 ][ 2 ] = -7.0;
	L[ 19 ][ 2 ][ 3 ] = -4.0;
	L[ 19 ][ 2 ][ 4 ] = 8.0;
	L[ 19 ][ 3 ][ 1 ] = 0;
	L[ 19 ][ 3 ][ 2 ] = 4.0;
	L[ 19 ][ 3 ][ 3 ] = 1.0;
	L[ 19 ][ 3 ][ 4 ] = -4.0;
	L[ 19 ][ 4 ][ 1 ] = 0;
	L[ 19 ][ 4 ][ 2 ] = -8.0;
	L[ 19 ][ 4 ][ 3 ] = -4.0;
	L[ 19 ][ 4 ][ 4 ] = 9.0;
	L[ 20 ][ 1 ][ 1 ] = 1.0;
	L[ 20 ][ 1 ][ 2 ] = 0;
	L[ 20 ][ 1 ][ 3 ] = 0;
	L[ 20 ][ 1 ][ 4 ] = 0;
	L[ 20 ][ 2 ][ 1 ] = 0;
	L[ 20 ][ 2 ][ 2 ] = 1.0;
	L[ 20 ][ 2 ][ 3 ] = -4.0;
	L[ 20 ][ 2 ][ 4 ] = -4.0;
	L[ 20 ][ 3 ][ 1 ] = 0;
	L[ 20 ][ 3 ][ 2 ] = 4.0;
	L[ 20 ][ 3 ][ 3 ] = -7.0;
	L[ 20 ][ 3 ][ 4 ] = -8.0;
	L[ 20 ][ 4 ][ 1 ] = 0;
	L[ 20 ][ 4 ][ 2 ] = -4.0;
	L[ 20 ][ 4 ][ 3 ] = 8.0;
	L[ 20 ][ 4 ][ 4 ] = 9.0;
	L[ 21 ][ 1 ][ 1 ] = 1.0;
	L[ 21 ][ 1 ][ 2 ] = 0;
	L[ 21 ][ 1 ][ 3 ] = -4.0;
	L[ 21 ][ 1 ][ 4 ] = -4.0;
	L[ 21 ][ 2 ][ 1 ] = 0;
	L[ 21 ][ 2 ][ 2 ] = 1.0;
	L[ 21 ][ 2 ][ 3 ] = 0;
	L[ 21 ][ 2 ][ 4 ] = 0;
	L[ 21 ][ 3 ][ 1 ] = 4.0;
	L[ 21 ][ 3 ][ 2 ] = 0;
	L[ 21 ][ 3 ][ 3 ] = -7.0;
	L[ 21 ][ 3 ][ 4 ] = -8.0;
	L[ 21 ][ 4 ][ 1 ] = -4.0;
	L[ 21 ][ 4 ][ 2 ] = 0;
	L[ 21 ][ 4 ][ 3 ] = 8.0;
	L[ 21 ][ 4 ][ 4 ] = 9.0;
	L[ 22 ][ 1 ][ 1 ] = 1.0;
	L[ 22 ][ 1 ][ 2 ] = -4.0;
	L[ 22 ][ 1 ][ 3 ] = 0;
	L[ 22 ][ 1 ][ 4 ] = -4.0;
	L[ 22 ][ 2 ][ 1 ] = 4.0;
	L[ 22 ][ 2 ][ 2 ] = -7.0;
	L[ 22 ][ 2 ][ 3 ] = 0;
	L[ 22 ][ 2 ][ 4 ] = -8.0;
	L[ 22 ][ 3 ][ 1 ] = 0;
	L[ 22 ][ 3 ][ 2 ] = 0;
	L[ 22 ][ 3 ][ 3 ] = 1.0;
	L[ 22 ][ 3 ][ 4 ] = 0;
	L[ 22 ][ 4 ][ 1 ] = -4.0;
	L[ 22 ][ 4 ][ 2 ] = 8.0;
	L[ 22 ][ 4 ][ 3 ] = 0;
	L[ 22 ][ 4 ][ 4 ] = 9.0;
	L[ 23 ][ 1 ][ 1 ] = 1.0;
	L[ 23 ][ 1 ][ 2 ] = 4.0;
	L[ 23 ][ 1 ][ 3 ] = 0;
	L[ 23 ][ 1 ][ 4 ] = -4.0;
	L[ 23 ][ 2 ][ 1 ] = -4.0;
	L[ 23 ][ 2 ][ 2 ] = -7.0;
	L[ 23 ][ 2 ][ 3 ] = 0;
	L[ 23 ][ 2 ][ 4 ] = 8.0;
	L[ 23 ][ 3 ][ 1 ] = 0;
	L[ 23 ][ 3 ][ 2 ] = 0;
	L[ 23 ][ 3 ][ 3 ] = 1.0;
	L[ 23 ][ 3 ][ 4 ] = 0;
	L[ 23 ][ 4 ][ 1 ] = -4.0;
	L[ 23 ][ 4 ][ 2 ] = -8.0;
	L[ 23 ][ 4 ][ 3 ] = 0;
	L[ 23 ][ 4 ][ 4 ] = 9.0;
	L[ 24 ][ 1 ][ 1 ] = 1.0;
	L[ 24 ][ 1 ][ 2 ] = 0;
	L[ 24 ][ 1 ][ 3 ] = 4.0;
	L[ 24 ][ 1 ][ 4 ] = -4.0;
	L[ 24 ][ 2 ][ 1 ] = 0;
	L[ 24 ][ 2 ][ 2 ] = 1.0;
	L[ 24 ][ 2 ][ 3 ] = 0;
	L[ 24 ][ 2 ][ 4 ] = 0;
	L[ 24 ][ 3 ][ 1 ] = -4.0;
	L[ 24 ][ 3 ][ 2 ] = 0;
	L[ 24 ][ 3 ][ 3 ] = -7.0;
	L[ 24 ][ 3 ][ 4 ] = 8.0;
	L[ 24 ][ 4 ][ 1 ] = -4.0;
	L[ 24 ][ 4 ][ 2 ] = 0;
	L[ 24 ][ 4 ][ 3 ] = -8.0;
	L[ 24 ][ 4 ][ 4 ] = 9.0;
}
