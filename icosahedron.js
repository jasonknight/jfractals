/*
 * Hyperbolic Icosahedron Fractal
 * Makes my beloved Icosahedron 
 */
 Math.log10 = function ( num ) {
	return Math.log( num ) / Math.LN10;
}
Array.prototype.fill = function (x, y, v, starti, startj) {
	if ( ! starti ) {
		starti = 0;
	}
	if ( ! startj ) {
		startj = 0;
	}
	var matrix = this;
	for ( var i = starti; i <= x; i++ ) {
		for ( var j = startj; j <= y; j++ ) {
			matrix[i][j] = v;
		}
	}
}
function RANDOM() {
	return Math.random();
}
var L = [];
L[ 1 ] = [];
L[ 1 ][ 1 ] = [];
L[ 1 ][ 2 ] = [];
L[ 1 ][ 3 ] = [];
L[ 1 ][ 4 ] = [];
L[ 2 ] = [];
L[ 2 ][ 1 ] = [];
L[ 2 ][ 2 ] = [];
L[ 2 ][ 3 ] = [];
L[ 2 ][ 4 ] = [];
L[ 3 ] = [];
L[ 3 ][ 1 ] = [];
L[ 3 ][ 2 ] = [];
L[ 3 ][ 3 ] = [];
L[ 3 ][ 4 ] = [];
L[ 4 ] = [];
L[ 4 ][ 1 ] = [];
L[ 4 ][ 2 ] = [];
L[ 4 ][ 3 ] = [];
L[ 4 ][ 4 ] = [];
L[ 5 ] = [];
L[ 5 ][ 1 ] = [];
L[ 5 ][ 2 ] = [];
L[ 5 ][ 3 ] = [];
L[ 5 ][ 4 ] = [];
L[ 6 ] = [];
L[ 6 ][ 1 ] = [];
L[ 6 ][ 2 ] = [];
L[ 6 ][ 3 ] = [];
L[ 6 ][ 4 ] = [];
L[ 7 ] = [];
L[ 7 ][ 1 ] = [];
L[ 7 ][ 2 ] = [];
L[ 7 ][ 3 ] = [];
L[ 7 ][ 4 ] = [];
L[ 8 ] = [];
L[ 8 ][ 1 ] = [];
L[ 8 ][ 2 ] = [];
L[ 8 ][ 3 ] = [];
L[ 8 ][ 4 ] = [];
L[ 9 ] = [];
L[ 9 ][ 1 ] = [];
L[ 9 ][ 2 ] = [];
L[ 9 ][ 3 ] = [];
L[ 9 ][ 4 ] = [];
L[ 10 ] = [];
L[ 10 ][ 1 ] = [];
L[ 10 ][ 2 ] = [];
L[ 10 ][ 3 ] = [];
L[ 10 ][ 4 ] = [];
L[ 11 ] = [];
L[ 11 ][ 1 ] = [];
L[ 11 ][ 2 ] = [];
L[ 11 ][ 3 ] = [];
L[ 11 ][ 4 ] = [];
L[ 12 ] = [];
L[ 12 ][ 1 ] = [];
L[ 12 ][ 2 ] = [];
L[ 12 ][ 3 ] = [];
L[ 12 ][ 4 ] = [];
L[ 13 ] = [];
L[ 13 ][ 1 ] = [];
L[ 13 ][ 2 ] = [];
L[ 13 ][ 3 ] = [];
L[ 13 ][ 4 ] = [];
L[ 14 ] = [];
L[ 14 ][ 1 ] = [];
L[ 14 ][ 2 ] = [];
L[ 14 ][ 3 ] = [];
L[ 14 ][ 4 ] = [];
L[ 15 ] = [];
L[ 15 ][ 1 ] = [];
L[ 15 ][ 2 ] = [];
L[ 15 ][ 3 ] = [];
L[ 15 ][ 4 ] = [];
L[ 16 ] = [];
L[ 16 ][ 1 ] = [];
L[ 16 ][ 2 ] = [];
L[ 16 ][ 3 ] = [];
L[ 16 ][ 4 ] = [];
L[ 17 ] = [];
L[ 17 ][ 1 ] = [];
L[ 17 ][ 2 ] = [];
L[ 17 ][ 3 ] = [];
L[ 17 ][ 4 ] = [];
L[ 18 ] = [];
L[ 18 ][ 1 ] = [];
L[ 18 ][ 2 ] = [];
L[ 18 ][ 3 ] = [];
L[ 18 ][ 4 ] = [];
L[ 19 ] = [];
L[ 19 ][ 1 ] = [];
L[ 19 ][ 2 ] = [];
L[ 19 ][ 3 ] = [];
L[ 19 ][ 4 ] = [];
L[ 20 ] = [];
L[ 20 ][ 1 ] = [];
L[ 20 ][ 2 ] = [];
L[ 20 ][ 3 ] = [];
L[ 20 ][ 4 ] = [];
L[ 21 ] = [];
L[ 21 ][ 1 ] = [];
L[ 21 ][ 2 ] = [];
L[ 21 ][ 3 ] = [];
L[ 21 ][ 4 ] = [];
L[ 22 ] = [];
L[ 22 ][ 1 ] = [];
L[ 22 ][ 2 ] = [];
L[ 22 ][ 3 ] = [];
L[ 22 ][ 4 ] = [];
L[ 23 ] = [];
L[ 23 ][ 1 ] = [];
L[ 23 ][ 2 ] = [];
L[ 23 ][ 3 ] = [];
L[ 23 ][ 4 ] = [];
L[ 24 ] = [];
L[ 24 ][ 1 ] = [];
L[ 24 ][ 2 ] = [];
L[ 24 ][ 3 ] = [];
L[ 24 ][ 4 ] = [];
function populateMatrices( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0;
	L[ 1 ][ 1 ][ 4 ] = 0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = 0;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0;
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = ( 5.0 + 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = ( -1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 1.0;
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = 0;
	L[ 2 ][ 3 ][ 1 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = ( -1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0;
	L[ 2 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 4 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 1 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 4 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 1 ] = ( 1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 2 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 4 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 3 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 4 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = ( -0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 3 ] = ( -0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 4 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 1 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 3 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 4 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 1 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 2 ] = ( -1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = ( -0.2 *( 5.0 + 0.2360679774997897 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 3 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 4 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 1 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 2 ] = ( 5.0 - 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 3 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 4 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 1 ] = ( 0.6472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 1 ] = ( -1.447213595499958 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 2 ] = ( 1.051462224238267 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 2 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 4 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 1 ] = ( 0.4702282018339785 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 3 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 4 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 2 ] = ( 0.7608452130361229 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 1 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 2 ] = ( -1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 1 ] = ( 5.0 + 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 2 ] = 0;
	L[ 10 ][ 1 ][ 3 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 4 ] = ( 1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 1 ] = 0;
	L[ 10 ][ 2 ][ 2 ] = 1.0;
	L[ 10 ][ 2 ][ 3 ] = 0;
	L[ 10 ][ 2 ][ 4 ] = 0;
	L[ 10 ][ 3 ][ 1 ] = ( 4.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 2 ] = 0;
	L[ 10 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 1 ] = ( 1.788854381999832 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 2 ] = 0;
	L[ 10 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 1 ] = ( 0.2 *( -5.0 + 4.23606797749979 * Math.pow( alpha, 2 ) )) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 2 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 3 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 4 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 1 ] = ( 2.351141009169893 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 2 ] = ( 5.0 + 2.23606797749979 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 3 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 4 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 1 ] = ( -0.2472135954999579 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 2 ] = ( 3.804226065180614 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 3 ] = ( 5.0 - 3.0 * Math.pow( alpha, 2 ) ) / ( 5.0 - 5.0 * Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 4 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 1 ] = ( 0.5527864045000421 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 2 ] = ( 1.70130161670408 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 3 ] = ( 0.8944271909999159 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - 1.0 * Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 1 ] = 1.0;
	L[ 12 ][ 1 ][ 2 ] = 0;
	L[ 12 ][ 1 ][ 3 ] = 0;
	L[ 12 ][ 1 ][ 4 ] = 0;
	L[ 12 ][ 2 ][ 1 ] = 0;
	L[ 12 ][ 2 ][ 2 ] = 1.0;
	L[ 12 ][ 2 ][ 3 ] = 0;
	L[ 12 ][ 2 ][ 4 ] = 0;
	L[ 12 ][ 3 ][ 1 ] = 0;
	L[ 12 ][ 3 ][ 2 ] = 0;
	L[ 12 ][ 3 ][ 3 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 1 ] = 0;
	L[ 12 ][ 4 ][ 2 ] = 0;
	L[ 12 ][ 4 ][ 3 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 4 ] = ( -1.0 - 1.0 * Math.pow( alpha, 2 ) ) / ( -1.0 + Math.pow( alpha, 2 ) );
}
function populateMatricesOcta( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0;
	L[ 1 ][ 1 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = 0;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = 1.0;
	L[ 1 ][ 3 ][ 4 ] = 0;
	L[ 1 ][ 4 ][ 1 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = 0;
	L[ 1 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 1.0;
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0;
	L[ 2 ][ 1 ][ 4 ] = 0;
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 1 ] = 0;
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = 1.0;
	L[ 2 ][ 3 ][ 4 ] = 0;
	L[ 2 ][ 4 ][ 1 ] = 0;
	L[ 2 ][ 4 ][ 2 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 3 ] = 0;
	L[ 2 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = 1.0;
	L[ 3 ][ 1 ][ 2 ] = 0;
	L[ 3 ][ 1 ][ 3 ] = 0;
	L[ 3 ][ 1 ][ 4 ] = 0;
	L[ 3 ][ 2 ][ 1 ] = 0;
	L[ 3 ][ 2 ][ 2 ] = 1.0;
	L[ 3 ][ 2 ][ 3 ] = 0;
	L[ 3 ][ 2 ][ 4 ] = 0;
	L[ 3 ][ 3 ][ 1 ] = 0;
	L[ 3 ][ 3 ][ 2 ] = 0;
	L[ 3 ][ 3 ][ 3 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0;
	L[ 3 ][ 4 ][ 2 ] = 0;
	L[ 3 ][ 4 ][ 3 ] = ( -2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = 1.0;
	L[ 4 ][ 1 ][ 2 ] = 0;
	L[ 4 ][ 1 ][ 3 ] = 0;
	L[ 4 ][ 1 ][ 4 ] = 0;
	L[ 4 ][ 2 ][ 1 ] = 0;
	L[ 4 ][ 2 ][ 2 ] = 1.0;
	L[ 4 ][ 2 ][ 3 ] = 0;
	L[ 4 ][ 2 ][ 4 ] = 0;
	L[ 4 ][ 3 ][ 1 ] = 0;
	L[ 4 ][ 3 ][ 2 ] = 0;
	L[ 4 ][ 3 ][ 3 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0;
	L[ 4 ][ 4 ][ 2 ] = 0;
	L[ 4 ][ 4 ][ 3 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = 1.0;
	L[ 5 ][ 1 ][ 2 ] = 0;
	L[ 5 ][ 1 ][ 3 ] = 0;
	L[ 5 ][ 1 ][ 4 ] = 0;
	L[ 5 ][ 2 ][ 1 ] = 0;
	L[ 5 ][ 2 ][ 2 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0;
	L[ 5 ][ 2 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0;
	L[ 5 ][ 3 ][ 2 ] = 0;
	L[ 5 ][ 3 ][ 3 ] = 1.0;
	L[ 5 ][ 3 ][ 4 ] = 0;
	L[ 5 ][ 4 ][ 1 ] = 0;
	L[ 5 ][ 4 ][ 2 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = 0;
	L[ 5 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = 0;
	L[ 6 ][ 1 ][ 3 ] = 0;
	L[ 6 ][ 1 ][ 4 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = 0;
	L[ 6 ][ 2 ][ 2 ] = 1.0;
	L[ 6 ][ 2 ][ 3 ] = 0;
	L[ 6 ][ 2 ][ 4 ] = 0;
	L[ 6 ][ 3 ][ 1 ] = 0;
	L[ 6 ][ 3 ][ 2 ] = 0;
	L[ 6 ][ 3 ][ 3 ] = 1.0;
	L[ 6 ][ 3 ][ 4 ] = 0;
	L[ 6 ][ 4 ][ 1 ] = ( 2.0 * alpha) / ( -1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = 0;
	L[ 6 ][ 4 ][ 3 ] = 0;
	L[ 6 ][ 4 ][ 4 ] = ( 1.0 + Math.pow( alpha, 2 ) ) / ( 1.0 - Math.pow( alpha, 2 ) );
}
function populateMatricesPara( alpha ) {
	alpha = 5 * alpha;
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = -1.0 * alpha;
	L[ 1 ][ 1 ][ 4 ] = alpha;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0;
	L[ 1 ][ 2 ][ 4 ] = 0;
	L[ 1 ][ 3 ][ 1 ] = alpha;
	L[ 1 ][ 3 ][ 2 ] = 0;
	L[ 1 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 1 ][ 3 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 1 ][ 4 ][ 1 ] = alpha;
	L[ 1 ][ 4 ][ 2 ] = 0;
	L[ 1 ][ 4 ][ 3 ] = -0.5* Math.pow( alpha, 2 );
	L[ 1 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 1.0;
	L[ 2 ][ 1 ][ 2 ] = -1.0 * alpha;
	L[ 2 ][ 1 ][ 3 ] = 0;
	L[ 2 ][ 1 ][ 4 ] = alpha;
	L[ 2 ][ 2 ][ 1 ] = alpha;
	L[ 2 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 2 ][ 2 ][ 3 ] = 0;
	L[ 2 ][ 2 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 2 ][ 3 ][ 1 ] = 0;
	L[ 2 ][ 3 ][ 2 ] = 0;
	L[ 2 ][ 3 ][ 3 ] = 1.0;
	L[ 2 ][ 3 ][ 4 ] = 0;
	L[ 2 ][ 4 ][ 1 ] = alpha;
	L[ 2 ][ 4 ][ 2 ] = -0.5* Math.pow( alpha, 2 );
	L[ 2 ][ 4 ][ 3 ] = 0;
	L[ 2 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = 1.0;
	L[ 3 ][ 1 ][ 2 ] = alpha;
	L[ 3 ][ 1 ][ 3 ] = 0;
	L[ 3 ][ 1 ][ 4 ] = alpha;
	L[ 3 ][ 2 ][ 1 ] = -1.0 * alpha;
	L[ 3 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 3 ][ 2 ][ 3 ] = 0;
	L[ 3 ][ 2 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 3 ][ 3 ][ 1 ] = 0;
	L[ 3 ][ 3 ][ 2 ] = 0;
	L[ 3 ][ 3 ][ 3 ] = 1.0;
	L[ 3 ][ 3 ][ 4 ] = 0;
	L[ 3 ][ 4 ][ 1 ] = alpha;
	L[ 3 ][ 4 ][ 2 ] = 0.5* Math.pow( alpha, 2 );
	L[ 3 ][ 4 ][ 3 ] = 0;
	L[ 3 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = 1.0;
	L[ 4 ][ 1 ][ 2 ] = 0;
	L[ 4 ][ 1 ][ 3 ] = alpha;
	L[ 4 ][ 1 ][ 4 ] = alpha;
	L[ 4 ][ 2 ][ 1 ] = 0;
	L[ 4 ][ 2 ][ 2 ] = 1.0;
	L[ 4 ][ 2 ][ 3 ] = 0;
	L[ 4 ][ 2 ][ 4 ] = 0;
	L[ 4 ][ 3 ][ 1 ] = -1.0 * alpha;
	L[ 4 ][ 3 ][ 2 ] = 0;
	L[ 4 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 4 ][ 3 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 4 ][ 4 ][ 1 ] = alpha;
	L[ 4 ][ 4 ][ 2 ] = 0;
	L[ 4 ][ 4 ][ 3 ] = 0.5* Math.pow( alpha, 2 );
	L[ 4 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = 1.0;
	L[ 5 ][ 1 ][ 2 ] = 0;
	L[ 5 ][ 1 ][ 3 ] = 0;
	L[ 5 ][ 1 ][ 4 ] = 0;
	L[ 5 ][ 2 ][ 1 ] = 0;
	L[ 5 ][ 2 ][ 2 ] = 1.0;
	L[ 5 ][ 2 ][ 3 ] = alpha;
	L[ 5 ][ 2 ][ 4 ] = alpha;
	L[ 5 ][ 3 ][ 1 ] = 0;
	L[ 5 ][ 3 ][ 2 ] = -1.0 * alpha;
	L[ 5 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 5 ][ 3 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 5 ][ 4 ][ 1 ] = 0;
	L[ 5 ][ 4 ][ 2 ] = alpha;
	L[ 5 ][ 4 ][ 3 ] = 0.5* Math.pow( alpha, 2 );
	L[ 5 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = 1.0;
	L[ 6 ][ 1 ][ 2 ] = 0;
	L[ 6 ][ 1 ][ 3 ] = 0;
	L[ 6 ][ 1 ][ 4 ] = 0;
	L[ 6 ][ 2 ][ 1 ] = 0;
	L[ 6 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 6 ][ 2 ][ 3 ] = alpha;
	L[ 6 ][ 2 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 6 ][ 3 ][ 1 ] = 0;
	L[ 6 ][ 3 ][ 2 ] = -1.0 * alpha;
	L[ 6 ][ 3 ][ 3 ] = 1.0;
	L[ 6 ][ 3 ][ 4 ] = alpha;
	L[ 6 ][ 4 ][ 1 ] = 0;
	L[ 6 ][ 4 ][ 2 ] = -0.5* Math.pow( alpha, 2 );
	L[ 6 ][ 4 ][ 3 ] = alpha;
	L[ 6 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = 1.0;
	L[ 7 ][ 1 ][ 2 ] = 0;
	L[ 7 ][ 1 ][ 3 ] = 0;
	L[ 7 ][ 1 ][ 4 ] = 0;
	L[ 7 ][ 2 ][ 1 ] = 0;
	L[ 7 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 7 ][ 2 ][ 3 ] = alpha;
	L[ 7 ][ 2 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 7 ][ 3 ][ 1 ] = 0;
	L[ 7 ][ 3 ][ 2 ] = -1.0 * alpha;
	L[ 7 ][ 3 ][ 3 ] = 1.0;
	L[ 7 ][ 3 ][ 4 ] = -1.0 * alpha;
	L[ 7 ][ 4 ][ 1 ] = 0;
	L[ 7 ][ 4 ][ 2 ] = 0.5* Math.pow( alpha, 2 );
	L[ 7 ][ 4 ][ 3 ] = -1.0 * alpha;
	L[ 7 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = 1.0;
	L[ 8 ][ 1 ][ 2 ] = 0;
	L[ 8 ][ 1 ][ 3 ] = 0;
	L[ 8 ][ 1 ][ 4 ] = 0;
	L[ 8 ][ 2 ][ 1 ] = 0;
	L[ 8 ][ 2 ][ 2 ] = 1.0;
	L[ 8 ][ 2 ][ 3 ] = alpha;
	L[ 8 ][ 2 ][ 4 ] = -1.0 * alpha;
	L[ 8 ][ 3 ][ 1 ] = 0;
	L[ 8 ][ 3 ][ 2 ] = -1.0 * alpha;
	L[ 8 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 8 ][ 3 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 8 ][ 4 ][ 1 ] = 0;
	L[ 8 ][ 4 ][ 2 ] = -1.0 * alpha;
	L[ 8 ][ 4 ][ 3 ] = -0.5* Math.pow( alpha, 2 );
	L[ 8 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 9 ][ 1 ][ 2 ] = alpha;
	L[ 9 ][ 1 ][ 3 ] = 0;
	L[ 9 ][ 1 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 9 ][ 2 ][ 1 ] = -1.0 * alpha;
	L[ 9 ][ 2 ][ 2 ] = 1.0;
	L[ 9 ][ 2 ][ 3 ] = 0;
	L[ 9 ][ 2 ][ 4 ] = alpha;
	L[ 9 ][ 3 ][ 1 ] = 0;
	L[ 9 ][ 3 ][ 2 ] = 0;
	L[ 9 ][ 3 ][ 3 ] = 1.0;
	L[ 9 ][ 3 ][ 4 ] = 0;
	L[ 9 ][ 4 ][ 1 ] = -0.5* Math.pow( alpha, 2 );
	L[ 9 ][ 4 ][ 2 ] = alpha;
	L[ 9 ][ 4 ][ 3 ] = 0;
	L[ 9 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 10 ][ 1 ][ 2 ] = 0;
	L[ 10 ][ 1 ][ 3 ] = -1.0 * alpha;
	L[ 10 ][ 1 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 10 ][ 2 ][ 1 ] = 0;
	L[ 10 ][ 2 ][ 2 ] = 1.0;
	L[ 10 ][ 2 ][ 3 ] = 0;
	L[ 10 ][ 2 ][ 4 ] = 0;
	L[ 10 ][ 3 ][ 1 ] = alpha;
	L[ 10 ][ 3 ][ 2 ] = 0;
	L[ 10 ][ 3 ][ 3 ] = 1.0;
	L[ 10 ][ 3 ][ 4 ] = -1.0 * alpha;
	L[ 10 ][ 4 ][ 1 ] = -0.5* Math.pow( alpha, 2 );
	L[ 10 ][ 4 ][ 2 ] = 0;
	L[ 10 ][ 4 ][ 3 ] = -1.0 * alpha;
	L[ 10 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 11 ][ 1 ][ 2 ] = -1.0 * alpha;
	L[ 11 ][ 1 ][ 3 ] = 0;
	L[ 11 ][ 1 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 11 ][ 2 ][ 1 ] = alpha;
	L[ 11 ][ 2 ][ 2 ] = 1.0;
	L[ 11 ][ 2 ][ 3 ] = 0;
	L[ 11 ][ 2 ][ 4 ] = alpha;
	L[ 11 ][ 3 ][ 1 ] = 0;
	L[ 11 ][ 3 ][ 2 ] = 0;
	L[ 11 ][ 3 ][ 3 ] = 1.0;
	L[ 11 ][ 3 ][ 4 ] = 0;
	L[ 11 ][ 4 ][ 1 ] = 0.5* Math.pow( alpha, 2 );
	L[ 11 ][ 4 ][ 2 ] = alpha;
	L[ 11 ][ 4 ][ 3 ] = 0;
	L[ 11 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 12 ][ 1 ][ 2 ] = 0;
	L[ 12 ][ 1 ][ 3 ] = -1.0 * alpha;
	L[ 12 ][ 1 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 12 ][ 2 ][ 1 ] = 0;
	L[ 12 ][ 2 ][ 2 ] = 1.0;
	L[ 12 ][ 2 ][ 3 ] = 0;
	L[ 12 ][ 2 ][ 4 ] = 0;
	L[ 12 ][ 3 ][ 1 ] = alpha;
	L[ 12 ][ 3 ][ 2 ] = 0;
	L[ 12 ][ 3 ][ 3 ] = 1.0;
	L[ 12 ][ 3 ][ 4 ] = alpha;
	L[ 12 ][ 4 ][ 1 ] = 0.5* Math.pow( alpha, 2 );
	L[ 12 ][ 4 ][ 2 ] = 0;
	L[ 12 ][ 4 ][ 3 ] = alpha;
	L[ 12 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 13 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 13 ][ 1 ][ 2 ] = 0;
	L[ 13 ][ 1 ][ 3 ] = alpha;
	L[ 13 ][ 1 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 13 ][ 2 ][ 1 ] = 0;
	L[ 13 ][ 2 ][ 2 ] = 1.0;
	L[ 13 ][ 2 ][ 3 ] = 0;
	L[ 13 ][ 2 ][ 4 ] = 0;
	L[ 13 ][ 3 ][ 1 ] = -1.0 * alpha;
	L[ 13 ][ 3 ][ 2 ] = 0;
	L[ 13 ][ 3 ][ 3 ] = 1.0;
	L[ 13 ][ 3 ][ 4 ] = -1.0 * alpha;
	L[ 13 ][ 4 ][ 1 ] = 0.5* Math.pow( alpha, 2 );
	L[ 13 ][ 4 ][ 2 ] = 0;
	L[ 13 ][ 4 ][ 3 ] = -1.0 * alpha;
	L[ 13 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 14 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 14 ][ 1 ][ 2 ] = alpha;
	L[ 14 ][ 1 ][ 3 ] = 0;
	L[ 14 ][ 1 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 14 ][ 2 ][ 1 ] = -1.0 * alpha;
	L[ 14 ][ 2 ][ 2 ] = 1.0;
	L[ 14 ][ 2 ][ 3 ] = 0;
	L[ 14 ][ 2 ][ 4 ] = -1.0 * alpha;
	L[ 14 ][ 3 ][ 1 ] = 0;
	L[ 14 ][ 3 ][ 2 ] = 0;
	L[ 14 ][ 3 ][ 3 ] = 1.0;
	L[ 14 ][ 3 ][ 4 ] = 0;
	L[ 14 ][ 4 ][ 1 ] = 0.5* Math.pow( alpha, 2 );
	L[ 14 ][ 4 ][ 2 ] = -1.0 * alpha;
	L[ 14 ][ 4 ][ 3 ] = 0;
	L[ 14 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 15 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 15 ][ 1 ][ 2 ] = 0;
	L[ 15 ][ 1 ][ 3 ] = alpha;
	L[ 15 ][ 1 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 15 ][ 2 ][ 1 ] = 0;
	L[ 15 ][ 2 ][ 2 ] = 1.0;
	L[ 15 ][ 2 ][ 3 ] = 0;
	L[ 15 ][ 2 ][ 4 ] = 0;
	L[ 15 ][ 3 ][ 1 ] = -1.0 * alpha;
	L[ 15 ][ 3 ][ 2 ] = 0;
	L[ 15 ][ 3 ][ 3 ] = 1.0;
	L[ 15 ][ 3 ][ 4 ] = alpha;
	L[ 15 ][ 4 ][ 1 ] = -0.5* Math.pow( alpha, 2 );
	L[ 15 ][ 4 ][ 2 ] = 0;
	L[ 15 ][ 4 ][ 3 ] = alpha;
	L[ 15 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 16 ][ 1 ][ 1 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 16 ][ 1 ][ 2 ] = -1.0 * alpha;
	L[ 16 ][ 1 ][ 3 ] = 0;
	L[ 16 ][ 1 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 16 ][ 2 ][ 1 ] = alpha;
	L[ 16 ][ 2 ][ 2 ] = 1.0;
	L[ 16 ][ 2 ][ 3 ] = 0;
	L[ 16 ][ 2 ][ 4 ] = -1.0 * alpha;
	L[ 16 ][ 3 ][ 1 ] = 0;
	L[ 16 ][ 3 ][ 2 ] = 0;
	L[ 16 ][ 3 ][ 3 ] = 1.0;
	L[ 16 ][ 3 ][ 4 ] = 0;
	L[ 16 ][ 4 ][ 1 ] = -0.5* Math.pow( alpha, 2 );
	L[ 16 ][ 4 ][ 2 ] = -1.0 * alpha;
	L[ 16 ][ 4 ][ 3 ] = 0;
	L[ 16 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 17 ][ 1 ][ 1 ] = 1.0;
	L[ 17 ][ 1 ][ 2 ] = 0;
	L[ 17 ][ 1 ][ 3 ] = 0;
	L[ 17 ][ 1 ][ 4 ] = 0;
	L[ 17 ][ 2 ][ 1 ] = 0;
	L[ 17 ][ 2 ][ 2 ] = 1.0;
	L[ 17 ][ 2 ][ 3 ] = -1.0 * alpha;
	L[ 17 ][ 2 ][ 4 ] = alpha;
	L[ 17 ][ 3 ][ 1 ] = 0;
	L[ 17 ][ 3 ][ 2 ] = alpha;
	L[ 17 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 17 ][ 3 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 17 ][ 4 ][ 1 ] = 0;
	L[ 17 ][ 4 ][ 2 ] = alpha;
	L[ 17 ][ 4 ][ 3 ] = -0.5* Math.pow( alpha, 2 );
	L[ 17 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 18 ][ 1 ][ 1 ] = 1.0;
	L[ 18 ][ 1 ][ 2 ] = 0;
	L[ 18 ][ 1 ][ 3 ] = 0;
	L[ 18 ][ 1 ][ 4 ] = 0;
	L[ 18 ][ 2 ][ 1 ] = 0;
	L[ 18 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 18 ][ 2 ][ 3 ] = -1.0 * alpha;
	L[ 18 ][ 2 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 18 ][ 3 ][ 1 ] = 0;
	L[ 18 ][ 3 ][ 2 ] = alpha;
	L[ 18 ][ 3 ][ 3 ] = 1.0;
	L[ 18 ][ 3 ][ 4 ] = alpha;
	L[ 18 ][ 4 ][ 1 ] = 0;
	L[ 18 ][ 4 ][ 2 ] = 0.5* Math.pow( alpha, 2 );
	L[ 18 ][ 4 ][ 3 ] = alpha;
	L[ 18 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 19 ][ 1 ][ 1 ] = 1.0;
	L[ 19 ][ 1 ][ 2 ] = 0;
	L[ 19 ][ 1 ][ 3 ] = 0;
	L[ 19 ][ 1 ][ 4 ] = 0;
	L[ 19 ][ 2 ][ 1 ] = 0;
	L[ 19 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 19 ][ 2 ][ 3 ] = -1.0 * alpha;
	L[ 19 ][ 2 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 19 ][ 3 ][ 1 ] = 0;
	L[ 19 ][ 3 ][ 2 ] = alpha;
	L[ 19 ][ 3 ][ 3 ] = 1.0;
	L[ 19 ][ 3 ][ 4 ] = -1.0 * alpha;
	L[ 19 ][ 4 ][ 1 ] = 0;
	L[ 19 ][ 4 ][ 2 ] = -0.5* Math.pow( alpha, 2 );
	L[ 19 ][ 4 ][ 3 ] = -1.0 * alpha;
	L[ 19 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 20 ][ 1 ][ 1 ] = 1.0;
	L[ 20 ][ 1 ][ 2 ] = 0;
	L[ 20 ][ 1 ][ 3 ] = 0;
	L[ 20 ][ 1 ][ 4 ] = 0;
	L[ 20 ][ 2 ][ 1 ] = 0;
	L[ 20 ][ 2 ][ 2 ] = 1.0;
	L[ 20 ][ 2 ][ 3 ] = -1.0 * alpha;
	L[ 20 ][ 2 ][ 4 ] = -1.0 * alpha;
	L[ 20 ][ 3 ][ 1 ] = 0;
	L[ 20 ][ 3 ][ 2 ] = alpha;
	L[ 20 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 20 ][ 3 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 20 ][ 4 ][ 1 ] = 0;
	L[ 20 ][ 4 ][ 2 ] = -1.0 * alpha;
	L[ 20 ][ 4 ][ 3 ] = 0.5* Math.pow( alpha, 2 );
	L[ 20 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 21 ][ 1 ][ 1 ] = 1.0;
	L[ 21 ][ 1 ][ 2 ] = 0;
	L[ 21 ][ 1 ][ 3 ] = -1.0 * alpha;
	L[ 21 ][ 1 ][ 4 ] = -1.0 * alpha;
	L[ 21 ][ 2 ][ 1 ] = 0;
	L[ 21 ][ 2 ][ 2 ] = 1.0;
	L[ 21 ][ 2 ][ 3 ] = 0;
	L[ 21 ][ 2 ][ 4 ] = 0;
	L[ 21 ][ 3 ][ 1 ] = alpha;
	L[ 21 ][ 3 ][ 2 ] = 0;
	L[ 21 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 21 ][ 3 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 21 ][ 4 ][ 1 ] = -1.0 * alpha;
	L[ 21 ][ 4 ][ 2 ] = 0;
	L[ 21 ][ 4 ][ 3 ] = 0.5* Math.pow( alpha, 2 );
	L[ 21 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 22 ][ 1 ][ 1 ] = 1.0;
	L[ 22 ][ 1 ][ 2 ] = -1.0 * alpha;
	L[ 22 ][ 1 ][ 3 ] = 0;
	L[ 22 ][ 1 ][ 4 ] = -1.0 * alpha;
	L[ 22 ][ 2 ][ 1 ] = alpha;
	L[ 22 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 22 ][ 2 ][ 3 ] = 0;
	L[ 22 ][ 2 ][ 4 ] = -0.5* Math.pow( alpha, 2 );
	L[ 22 ][ 3 ][ 1 ] = 0;
	L[ 22 ][ 3 ][ 2 ] = 0;
	L[ 22 ][ 3 ][ 3 ] = 1.0;
	L[ 22 ][ 3 ][ 4 ] = 0;
	L[ 22 ][ 4 ][ 1 ] = -1.0 * alpha;
	L[ 22 ][ 4 ][ 2 ] = 0.5* Math.pow( alpha, 2 );
	L[ 22 ][ 4 ][ 3 ] = 0;
	L[ 22 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 23 ][ 1 ][ 1 ] = 1.0;
	L[ 23 ][ 1 ][ 2 ] = alpha;
	L[ 23 ][ 1 ][ 3 ] = 0;
	L[ 23 ][ 1 ][ 4 ] = -1.0 * alpha;
	L[ 23 ][ 2 ][ 1 ] = -1.0 * alpha;
	L[ 23 ][ 2 ][ 2 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 23 ][ 2 ][ 3 ] = 0;
	L[ 23 ][ 2 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 23 ][ 3 ][ 1 ] = 0;
	L[ 23 ][ 3 ][ 2 ] = 0;
	L[ 23 ][ 3 ][ 3 ] = 1.0;
	L[ 23 ][ 3 ][ 4 ] = 0;
	L[ 23 ][ 4 ][ 1 ] = -1.0 * alpha;
	L[ 23 ][ 4 ][ 2 ] = -0.5* Math.pow( alpha, 2 );
	L[ 23 ][ 4 ][ 3 ] = 0;
	L[ 23 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
	L[ 24 ][ 1 ][ 1 ] = 1.0;
	L[ 24 ][ 1 ][ 2 ] = 0;
	L[ 24 ][ 1 ][ 3 ] = alpha;
	L[ 24 ][ 1 ][ 4 ] = -1.0 * alpha;
	L[ 24 ][ 2 ][ 1 ] = 0;
	L[ 24 ][ 2 ][ 2 ] = 1.0;
	L[ 24 ][ 2 ][ 3 ] = 0;
	L[ 24 ][ 2 ][ 4 ] = 0;
	L[ 24 ][ 3 ][ 1 ] = -1.0 * alpha;
	L[ 24 ][ 3 ][ 2 ] = 0;
	L[ 24 ][ 3 ][ 3 ] = 1.0 - 0.5* Math.pow( alpha, 2 );
	L[ 24 ][ 3 ][ 4 ] = 0.5* Math.pow( alpha, 2 );
	L[ 24 ][ 4 ][ 1 ] = -1.0 * alpha;
	L[ 24 ][ 4 ][ 2 ] = 0;
	L[ 24 ][ 4 ][ 3 ] = -0.5* Math.pow( alpha, 2 );
	L[ 24 ][ 4 ][ 4 ] = 0.5*(2.0 +  Math.pow( alpha, 2 ) );
}
function populatePlatonicMatricesCube( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0.0;
	L[ 1 ][ 1 ][ 4 ] = 0.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0.0;
	L[ 1 ][ 2 ][ 4 ] = 0.0;
	L[ 1 ][ 3 ][ 1 ] = 0.0;
	L[ 1 ][ 3 ][ 2 ] = 0.0;
	L[ 1 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0.0;
	L[ 1 ][ 4 ][ 2 ] = 0.0;
	L[ 1 ][ 4 ][ 3 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0.0 - (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = 0.0 - (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0.0;
	L[ 2 ][ 2 ][ 4 ] = 0.0;
	L[ 2 ][ 3 ][ 1 ] = 0.0 - (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0.0;
	L[ 2 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) + (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = (-0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = 0.0 - (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0.0;
	L[ 2 ][ 4 ][ 3 ] = (-0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 3 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 4 ] = 0.0 - (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 1 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 4 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 2 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 1 ] = 0.0 - (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 2 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 3 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 4 ] = 0.0 - (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 3 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 4 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 1 ] = 0.0 + (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 2 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = 0.0 - (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 2 ] = 0;
	L[ 7 ][ 1 ][ 3 ] = 0.0 - (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 4 ] = 0.0 + (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 1 ] = 0;
	L[ 7 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 3 ] = 0.0;
	L[ 7 ][ 2 ][ 4 ] = 0.0;
	L[ 7 ][ 3 ][ 1 ] = 0.0 - (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 2 ] = 0.0;
	L[ 7 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) + (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 4 ] = (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 1 ] = 0.0 + (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 2 ] = 0.0;
	L[ 7 ][ 4 ][ 3 ] = (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = 1.0;
	L[ 8 ][ 1 ][ 2 ] = 0;
	L[ 8 ][ 1 ][ 3 ] = 0.0;
	L[ 8 ][ 1 ][ 4 ] = 0.0;
	L[ 8 ][ 2 ][ 1 ] = 0;
	L[ 8 ][ 2 ][ 2 ] = 1.0;
	L[ 8 ][ 2 ][ 3 ] = 0.0;
	L[ 8 ][ 2 ][ 4 ] = 0.0;
	L[ 8 ][ 3 ][ 1 ] = 0.0;
	L[ 8 ][ 3 ][ 2 ] = 0.0;
	L[ 8 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 4 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 1 ] = 0.0;
	L[ 8 ][ 4 ][ 2 ] = 0.0;
	L[ 8 ][ 4 ][ 3 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
}
function populatePlatonicMatricesDodeca( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0.0;
	L[ 1 ][ 1 ][ 4 ] = 0.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0.0;
	L[ 1 ][ 2 ][ 4 ] = 0.0;
	L[ 1 ][ 3 ][ 1 ] = 0.0;
	L[ 1 ][ 3 ][ 2 ] = 0.0;
	L[ 1 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0.0;
	L[ 1 ][ 4 ][ 2 ] = 0.0;
	L[ 1 ][ 4 ][ 3 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (0.11111111111111116* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0.0 - (0.9938079899999065* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = 0.0 - (1.3333333333333333* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0.0;
	L[ 2 ][ 2 ][ 4 ] = 0.0;
	L[ 2 ][ 3 ][ 1 ] = 0.0 - (0.9938079899999065* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0.0;
	L[ 2 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (0.11111111111111116* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = (-1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = 0.0 - (1.3333333333333333* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0.0;
	L[ 2 ][ 4 ][ 3 ] = (-1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = 0.0 + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = 0.0 - (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = 0.0 - (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = 0.0 - (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0.0 + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = 0.0 - (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = (-0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = 0.0 + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = (-0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = 0.0 + (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = 0.0 + (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = 0.0 + (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0.0 + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = 0.0 + (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = (-0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 3 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 4 ] = 0.0 - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 1 ] = (-0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0.0 - (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 4 ] = 0.0 - (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 2 ] = 0.0 - (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 1 ] = 0.0 - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 2 ] = 0.0 - (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 4 ] = (-1.0 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 3 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 4 ] = 0.0 - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 3 ] = 0.0 + (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 4 ] = 0.0 + (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 1 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 2 ] = 0.0 + (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = 0.0 - (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = 0.0 + (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = (-1.0 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = (-1.0 - 0.5231337702777075* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 2 ] = (0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 3 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 4 ] = 0.0 + (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 1 ] = (0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 2 ] = (-1.0 + 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 3 ] = 0.0 - (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 4 ] = 0.0 - (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 1 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 2 ] = 0.0 - (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 1 ] = 0.0 + (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 2 ] = 0.0 - (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = (-1.0 + 0.9675782147221521* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 2 ] = (-0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 3 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 4 ] = 0.0 - (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 1 ] = (-0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 2 ] = (-1.0 - 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 3 ] = 0.0 - (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 4 ] = 0.0 - (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 1 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 2 ] = 0.0 - (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 1 ] = 0.0 - (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 2 ] = 0.0 - (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 1 ] = (-1.0 + 0.9675782147221521* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 2 ] = (0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 3 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 4 ] = 0.0 - (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 1 ] = (0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 2 ] = (-1.0 - 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 3 ] = 0.0 + (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 4 ] = 0.0 + (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 1 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 2 ] = 0.0 + (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 1 ] = 0.0 - (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 2 ] = 0.0 + (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 1 ] = (-1.0 - 0.5231337702777075* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 2 ] = (-0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 3 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 4 ] = 0.0 + (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 1 ] = (-0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 2 ] = (-1.0 + 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 3 ] = 0.0 + (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 4 ] = 0.0 + (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 1 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 2 ] = 0.0 + (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 1 ] = 0.0 + (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 2 ] = 0.0 + (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 1 ] = (-1.0 - 0.5231337702777075* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 2 ] = (-0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 3 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 4 ] = 0.0 - (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 1 ] = (-0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 2 ] = (-1.0 + 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 3 ] = 0.0 + (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 4 ] = 0.0 - (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 1 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 2 ] = 0.0 + (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 1 ] = 0.0 - (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 2 ] = 0.0 - (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 1 ] = (-1.0 - 0.5231337702777075* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 2 ] = (0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 3 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 4 ] = 0.0 - (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 2 ][ 1 ] = (0.6227815726418106* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 2 ][ 2 ] = (-1.0 + 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 2 ][ 3 ] = 0.0 - (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 2 ][ 4 ] = 0.0 + (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 1 ] = 0.0 + (0.5817853308333099* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 2 ] = 0.0 - (0.23788139318205997* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 1 ] = 0.0 - (1.7453559924999296* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 2 ] = 0.0 + (0.7136441795461799* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 1 ][ 1 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 1 ][ 2 ] = (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 1 ][ 3 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 1 ][ 4 ] = 0.0 + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 2 ][ 1 ] = (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 2 ][ 3 ] = 0.0 + (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 2 ][ 4 ] = 0.0 - (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 3 ][ 1 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 3 ][ 2 ] = 0.0 + (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 4 ][ 1 ] = 0.0 + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 4 ][ 2 ] = 0.0 - (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 13 ][ 4 ][ 4 ] = (-1.0 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 1 ][ 1 ] = (-1.0 + 0.9675782147221521* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 1 ][ 2 ] = (0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 1 ][ 3 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 1 ][ 4 ] = 0.0 + (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 2 ][ 1 ] = (0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 2 ][ 2 ] = (-1.0 - 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 2 ][ 3 ] = 0.0 + (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 2 ][ 4 ] = 0.0 - (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 3 ][ 1 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 3 ][ 2 ] = 0.0 + (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 4 ][ 1 ] = 0.0 + (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 4 ][ 2 ] = 0.0 - (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 14 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 1 ][ 1 ] = (-1.0 + 0.9675782147221521* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 1 ][ 2 ] = (-0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 1 ][ 3 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 1 ][ 4 ] = 0.0 + (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 2 ][ 1 ] = (-0.2378813931820599* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 2 ][ 2 ] = (-1.0 - 0.7453559924999298* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 2 ][ 3 ] = 0.0 - (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 2 ][ 4 ] = 0.0 + (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 3 ][ 1 ] = 0.0 - (0.08488133583335668* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 3 ][ 2 ] = 0.0 - (0.6227815726418104* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 4 ][ 1 ] = 0.0 + (0.25464400750007005* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 4 ][ 2 ] = 0.0 + (1.8683447179254313* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 15 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 1 ][ 1 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 1 ][ 2 ] = (-0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 1 ][ 3 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 1 ][ 4 ] = 0.0 + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 2 ][ 1 ] = (-0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 2 ][ 3 ] = 0.0 - (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 2 ][ 4 ] = 0.0 + (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 3 ][ 1 ] = 0.0 - (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 3 ][ 2 ] = 0.0 - (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 4 ][ 1 ] = 0.0 + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 4 ][ 2 ] = 0.0 + (1.1547005383792515* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 16 ][ 4 ][ 4 ] = (-1.0 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 1 ][ 1 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 1 ][ 2 ] = (-0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 1 ][ 3 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 1 ][ 4 ] = 0.0 - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 2 ][ 1 ] = (-0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 2 ][ 3 ] = 0.0 + (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 2 ][ 4 ] = 0.0 - (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 3 ][ 1 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 3 ][ 2 ] = 0.0 + (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 3 ][ 3 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 4 ][ 1 ] = 0.0 - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 4 ][ 2 ] = 0.0 - (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 17 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 1 ][ 1 ] = (-1.0 + 0.7777777777777779* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 1 ][ 2 ] = (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 1 ][ 3 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 1 ][ 4 ] = 0.0 - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 2 ][ 1 ] = (0.3849001794597505* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 2 ][ 2 ] = (-1.0 + 0.33333333333333326* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 2 ][ 3 ] = 0.0 - (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 2 ][ 4 ] = 0.0 + (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 3 ][ 1 ] = 0.0 + (0.49690399499995325* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 3 ][ 2 ] = 0.0 - (0.8606629658238706* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 3 ][ 3 ] = (-1.0 - 0.11111111111111105* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 4 ][ 1 ] = 0.0 - (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 4 ][ 2 ] = 0.0 + (1.1547005383792517* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 18 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (0.11111111111111116* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 1 ][ 2 ] = 0;
	L[ 19 ][ 1 ][ 3 ] = 0.0 - (0.9938079899999065* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 1 ][ 4 ] = 0.0 + (1.3333333333333333* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 2 ][ 1 ] = 0;
	L[ 19 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 2 ][ 3 ] = 0.0;
	L[ 19 ][ 2 ][ 4 ] = 0.0;
	L[ 19 ][ 3 ][ 1 ] = 0.0 - (0.9938079899999065* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 3 ][ 2 ] = 0.0;
	L[ 19 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (0.11111111111111116* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 3 ][ 4 ] = (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 4 ][ 1 ] = 0.0 + (1.3333333333333333* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 4 ][ 2 ] = 0.0;
	L[ 19 ][ 4 ][ 3 ] = (1.4907119849998598* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 19 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 20 ][ 1 ][ 1 ] = 1.0;
	L[ 20 ][ 1 ][ 2 ] = 0;
	L[ 20 ][ 1 ][ 3 ] = 0.0;
	L[ 20 ][ 1 ][ 4 ] = 0.0;
	L[ 20 ][ 2 ][ 1 ] = 0;
	L[ 20 ][ 2 ][ 2 ] = 1.0;
	L[ 20 ][ 2 ][ 3 ] = 0.0;
	L[ 20 ][ 2 ][ 4 ] = 0.0;
	L[ 20 ][ 3 ][ 1 ] = 0.0;
	L[ 20 ][ 3 ][ 2 ] = 0.0;
	L[ 20 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 20 ][ 3 ][ 4 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 20 ][ 4 ][ 1 ] = 0.0;
	L[ 20 ][ 4 ][ 2 ] = 0.0;
	L[ 20 ][ 4 ][ 3 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 20 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
}
function populatePlatonicMatricesIcosa( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0.0;
	L[ 1 ][ 1 ][ 4 ] = 0.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0.0;
	L[ 1 ][ 2 ][ 4 ] = 0.0;
	L[ 1 ][ 3 ][ 1 ] = 0.0;
	L[ 1 ][ 3 ][ 2 ] = 0.0;
	L[ 1 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0.0;
	L[ 1 ][ 4 ][ 2 ] = 0.0;
	L[ 1 ][ 4 ][ 3 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (0.6* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0.0 - (0.7999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = 0.0 - (1.7888543819998317* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (0.9999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0.0;
	L[ 2 ][ 2 ][ 4 ] = 0.0;
	L[ 2 ][ 3 ][ 1 ] = 0.0 - (0.7999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0.0;
	L[ 2 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) + (0.6* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = (-0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = 0.0 - (1.7888543819998317* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0.0;
	L[ 2 ][ 4 ][ 3 ] = (-0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (0.9999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = (-1.0 + 0.847213595499958* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = (-0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = 0.0 - (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = (-0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = (-1.0 - 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = 0.0 - (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = 0.0 - (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = 0.0 - (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0.0 - (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = 0.0 - (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = (-1.0 - 0.0472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = (0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = 0.0 + (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = (0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = (-1.0 + 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = 0.0 - (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = 0.0 - (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = 0.0 - (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = (-5.551115123125783e-17 + (-0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0.0 + (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = 0.0 - (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = (-5.551115123125783e-17 + (-0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = (-1.0 - 0.0472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = (-0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 3 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 4 ] = 0.0 + (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 1 ] = (-0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 2 ] = (-1.0 + 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0.0 + (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 4 ] = 0.0 + (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 2 ] = 0.0 + (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = (-5.551115123125783e-17 + (-0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 1 ] = 0.0 + (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 2 ] = 0.0 + (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = (-5.551115123125783e-17 + (-0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = (-1.0 + 0.847213595499958* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 2 ] = (0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 3 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 4 ] = 0.0 - (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 1 ] = (0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 2 ] = (-1.0 - 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 3 ] = 0.0 + (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 2 ][ 4 ] = 0.0 + (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 1 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 2 ] = 0.0 + (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = 0.0 - (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 2 ] = 0.0 + (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) - (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 1 ] = (-1.0 - 0.0472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 2 ] = (-0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 3 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 1 ][ 4 ] = 0.0 - (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 1 ] = (-0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 2 ] = (-1.0 + 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 3 ] = 0.0 + (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 2 ][ 4 ] = 0.0 - (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 1 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 2 ] = 0.0 + (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 3 ][ 4 ] = (-5.551115123125783e-17 + (0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 1 ] = 0.0 - (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 2 ] = 0.0 - (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 3 ] = (-5.551115123125783e-17 + (0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 7 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 1 ] = (-1.0 - 0.0472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 2 ] = (0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 3 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 1 ][ 4 ] = 0.0 - (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 1 ] = (0.760845213036123* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 2 ] = (-1.0 + 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 3 ] = 0.0 - (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 2 ][ 4 ] = 0.0 + (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 1 ] = 0.0 + (0.6472135954999579* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 2 ] = 0.0 - (0.47022820183397845* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 3 ][ 4 ] = (-5.551115123125783e-17 + (0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 1 ] = 0.0 - (1.447213595499958* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 2 ] = 0.0 + (1.0514622242382672* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 3 ] = (-5.551115123125783e-17 + (0.8944271909999159 + 5.551115123125783e-17* alpha)* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 8 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 1 ] = (-1.0 + 0.847213595499958* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 2 ] = (0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 3 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 1 ][ 4 ] = 0.0 + (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 1 ] = (0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 2 ] = (-1.0 - 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 3 ] = 0.0 + (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 2 ][ 4 ] = 0.0 - (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 1 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 2 ] = 0.0 + (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 1 ] = 0.0 + (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 2 ] = 0.0 - (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 9 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (0.6* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 2 ] = 0;
	L[ 10 ][ 1 ][ 3 ] = 0.0 - (0.7999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 1 ][ 4 ] = 0.0 + (1.7888543819998317* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 1 ] = 0;
	L[ 10 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (0.9999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 2 ][ 3 ] = 0.0;
	L[ 10 ][ 2 ][ 4 ] = 0.0;
	L[ 10 ][ 3 ][ 1 ] = 0.0 - (0.7999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 2 ] = 0.0;
	L[ 10 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) + (0.6* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 3 ][ 4 ] = (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 1 ] = 0.0 + (1.7888543819998317* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 2 ] = 0.0;
	L[ 10 ][ 4 ][ 3 ] = (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 10 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (0.9999999999999999* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 1 ] = (-1.0 + 0.847213595499958* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 2 ] = (-0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 3 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 1 ][ 4 ] = 0.0 + (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 1 ] = (-0.4702282018339785* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 2 ] = (-1.0 - 0.4472135954999581* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 3 ] = 0.0 - (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 2 ][ 4 ] = 0.0 + (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 1 ] = 0.0 - (0.24721359549995792* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 2 ] = 0.0 - (0.7608452130361228* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 3 ] = (-0.9999999999999999 + 0.6000000000000001* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 1 ] = 0.0 + (0.552786404500042* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 2 ] = 0.0 + (1.70130161670408* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.8944271909999159* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 11 ][ 4 ][ 4 ] = (-0.9999999999999999 - 1.0000000000000002* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 1 ][ 1 ] = 1.0;
	L[ 12 ][ 1 ][ 2 ] = 0;
	L[ 12 ][ 1 ][ 3 ] = 0.0;
	L[ 12 ][ 1 ][ 4 ] = 0.0;
	L[ 12 ][ 2 ][ 1 ] = 0;
	L[ 12 ][ 2 ][ 2 ] = 1.0;
	L[ 12 ][ 2 ][ 3 ] = 0.0;
	L[ 12 ][ 2 ][ 4 ] = 0.0;
	L[ 12 ][ 3 ][ 1 ] = 0.0;
	L[ 12 ][ 3 ][ 2 ] = 0.0;
	L[ 12 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 3 ][ 4 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 1 ] = 0.0;
	L[ 12 ][ 4 ][ 2 ] = 0.0;
	L[ 12 ][ 4 ][ 3 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 12 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
}
function populatePlatonicMatricesOcta( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0.0;
	L[ 1 ][ 1 ][ 4 ] = 0.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0.0;
	L[ 1 ][ 2 ][ 4 ] = 0.0;
	L[ 1 ][ 3 ][ 1 ] = 0.0;
	L[ 1 ][ 3 ][ 2 ] = 0.0;
	L[ 1 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0.0;
	L[ 1 ][ 4 ][ 2 ] = 0.0;
	L[ 1 ][ 4 ][ 3 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0.0;
	L[ 2 ][ 1 ][ 3 ] = 0.0;
	L[ 2 ][ 1 ][ 4 ] = 0.0 - (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0.0;
	L[ 2 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0.0;
	L[ 2 ][ 2 ][ 4 ] = 0.0;
	L[ 2 ][ 3 ][ 1 ] = 0.0;
	L[ 2 ][ 3 ][ 2 ] = 0.0;
	L[ 2 ][ 3 ][ 3 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = 0.0;
	L[ 2 ][ 4 ][ 1 ] = 0.0 - (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0.0;
	L[ 2 ][ 4 ][ 3 ] = 0.0;
	L[ 2 ][ 4 ][ 4 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = 0.0;
	L[ 3 ][ 1 ][ 3 ] = 0.0;
	L[ 3 ][ 1 ][ 4 ] = 0.0;
	L[ 3 ][ 2 ][ 1 ] = 0.0;
	L[ 3 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = 0.0;
	L[ 3 ][ 2 ][ 4 ] = 0.0 - (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = 0.0;
	L[ 3 ][ 3 ][ 2 ] = 0.0;
	L[ 3 ][ 3 ][ 3 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = 0.0;
	L[ 3 ][ 4 ][ 1 ] = 0.0;
	L[ 3 ][ 4 ][ 2 ] = 0.0 - (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = 0.0;
	L[ 3 ][ 4 ][ 4 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = 0.0;
	L[ 4 ][ 1 ][ 3 ] = 0.0;
	L[ 4 ][ 1 ][ 4 ] = 0.0 + (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = 0.0;
	L[ 4 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = 0.0;
	L[ 4 ][ 2 ][ 4 ] = 0.0;
	L[ 4 ][ 3 ][ 1 ] = 0.0;
	L[ 4 ][ 3 ][ 2 ] = 0.0;
	L[ 4 ][ 3 ][ 3 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = 0.0;
	L[ 4 ][ 4 ][ 1 ] = 0.0 + (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = 0.0;
	L[ 4 ][ 4 ][ 3 ] = 0.0;
	L[ 4 ][ 4 ][ 4 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 1 ][ 2 ] = 0.0;
	L[ 5 ][ 1 ][ 3 ] = 0.0;
	L[ 5 ][ 1 ][ 4 ] = 0.0;
	L[ 5 ][ 2 ][ 1 ] = 0.0;
	L[ 5 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 2 ][ 3 ] = 0.0;
	L[ 5 ][ 2 ][ 4 ] = 0.0 + (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 1 ] = 0.0;
	L[ 5 ][ 3 ][ 2 ] = 0.0;
	L[ 5 ][ 3 ][ 3 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 3 ][ 4 ] = 0.0;
	L[ 5 ][ 4 ][ 1 ] = 0.0;
	L[ 5 ][ 4 ][ 2 ] = 0.0 + (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 5 ][ 4 ][ 3 ] = 0.0;
	L[ 5 ][ 4 ][ 4 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 1 ][ 1 ] = 1.0;
	L[ 6 ][ 1 ][ 2 ] = 0;
	L[ 6 ][ 1 ][ 3 ] = 0.0;
	L[ 6 ][ 1 ][ 4 ] = 0.0;
	L[ 6 ][ 2 ][ 1 ] = 0;
	L[ 6 ][ 2 ][ 2 ] = 1.0;
	L[ 6 ][ 2 ][ 3 ] = 0.0;
	L[ 6 ][ 2 ][ 4 ] = 0.0;
	L[ 6 ][ 3 ][ 1 ] = 0.0;
	L[ 6 ][ 3 ][ 2 ] = 0.0;
	L[ 6 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 3 ][ 4 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 1 ] = 0.0;
	L[ 6 ][ 4 ][ 2 ] = 0.0;
	L[ 6 ][ 4 ][ 3 ] = (2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 6 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
}
function populatePlatonicMatricesTetra( alpha ) {
	L[ 1 ][ 1 ][ 1 ] = 1.0;
	L[ 1 ][ 1 ][ 2 ] = 0;
	L[ 1 ][ 1 ][ 3 ] = 0.0;
	L[ 1 ][ 1 ][ 4 ] = 0.0;
	L[ 1 ][ 2 ][ 1 ] = 0;
	L[ 1 ][ 2 ][ 2 ] = 1.0;
	L[ 1 ][ 2 ][ 3 ] = 0.0;
	L[ 1 ][ 2 ][ 4 ] = 0.0;
	L[ 1 ][ 3 ][ 1 ] = 0.0;
	L[ 1 ][ 3 ][ 2 ] = 0.0;
	L[ 1 ][ 3 ][ 3 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 3 ][ 4 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 1 ] = 0.0;
	L[ 1 ][ 4 ][ 2 ] = 0.0;
	L[ 1 ][ 4 ][ 3 ] = (-2.0* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 1 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 1 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) - (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 2 ] = 0;
	L[ 2 ][ 1 ][ 3 ] = 0.0 + (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 1 ][ 4 ] = 0.0 - (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 1 ] = 0;
	L[ 2 ][ 2 ][ 2 ] = 0.0 - 1./(-1.0 + Math.pow( alpha, 2 ) ) + (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 2 ][ 3 ] = 0.0;
	L[ 2 ][ 2 ][ 4 ] = 0.0;
	L[ 2 ][ 3 ][ 1 ] = 0.0 + (0.6285393610547089* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 2 ] = 0.0;
	L[ 2 ][ 3 ][ 3 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) + (0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 3 ][ 4 ] = (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 1 ] = 0.0 - (1.8856180831641267* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 2 ] = 0.0;
	L[ 2 ][ 4 ][ 3 ] = (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 2 ][ 4 ][ 4 ] = 0.0 + 1/(1.0 - 1.0* Math.pow( alpha, 2 ) ) - (1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 2 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 3 ] = 0.0 - (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 1 ][ 4 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 1 ] = (0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 3 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 2 ][ 4 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 1 ] = 0.0 - (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 2 ] = 0.0 + (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 1 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 2 ] = 0.0 - (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 3 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 1 ] = (-1.0 + 0.5555555555555556* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 2 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 3 ] = 0.0 - (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 1 ][ 4 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 1 ] = (-0.769800358919501* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 2 ] = (-1.0 - 0.3333333333333333* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 3 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 2 ][ 4 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 1 ] = 0.0 - (0.31426968052735443* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 2 ] = 0.0 - (0.5443310539518174* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 3 ] = (-1.0 + 0.7777777777777777* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 3 ][ 4 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 1 ] = 0.0 + (0.9428090415820634* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 2 ] = 0.0 + (1.632993161855452* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 3 ] = 0.0 + 1/(2.0 - 2.0* Math.pow( alpha, 2 ) ) + 0.5/(-1.0 + Math.pow( alpha, 2 ) ) + (0.6666666666666666* alpha) / (-1.0 + Math.pow( alpha, 2 ) );
	L[ 4 ][ 4 ][ 4 ] = (-1.0 - 1.0* Math.pow( alpha, 2 ) ) / (-1.0 + Math.pow( alpha, 2 ) );
}

var Icosa = {};
Icosa.settings = {
	iterations: 100000,
	alpha: 0.77,
	fractal_type: "PlatonicIcosa",
	display_type: 'Spherical',
	xylimit: 1.0,
	starty: 1,
};
self.addEventListener('message',function (e) {
		if ( e.data.text == "Settings") {
			Icosa.settings = e.data.settings;
		} else if ( e.data.text == "Run" ) {
			Icosa.generate();
		}
		self.postMessage("ACK " + e.data.text);
});
var NN 			= 600;
var NIT 		= 10000000;
var ALPHA	 	= 0.80;
var DENSITY		= []
	for ( i = 1; i <= NN; i++ ) { DENSITY[i] = []; }
var DENSITYL	= [];
	for ( i = 1; i <= NN; i++ ) { DENSITYL[i] = []; }
var MAXL;
var X = [];
var X1 = [];
var A;
var RR;
var R;
var I,J,K,M,N;
var contrast = 0;
var a1 = 10.0/255.0;
var a2 = 17.0/255.0;
var a3 = 108.0/255.0;
var a4 = 159.0/255.0;
var b1 = 0.0;
var b2 = 72.0/255.0;
var b3 = 198.0/255.0;
var b4 = 1.0;
var fractal_length = 12;
var ctx;

Icosa.generate = function() {
	NIT 	= parseInt(Icosa.settings.iterations);
	ALPHA = parseFloat(Icosa.settings.alpha);
	NN = Icosa.settings.nn;
	// = 1 - Math.sqrt( 1 - (V * V) ) / V; 
	for ( i = Icosa.settings.starty; i <= NN; i++ ) { DENSITY[i] = []; }
	if ( ALPHA >= 0.99 || ALPHA <= 0.01) {
		self.postMessage("ERROR: Alpha must be BETWEEN 0.01 and 0.99, but be neither.");
		return;
	}

	for ( i = 1; i <= NN; i++ ) { DENSITY[i] = []; }
	for ( i = 1; i <= NN; i++ ) { DENSITYL[i] = []; }


	// fillMatrix(  DENSITY, NN, NN, 1.0 );
	// fillMatrix( DENSITYL, NN, NN, 0.0 );
	DENSITY.fill( NN, NN, 1.0, 1, 1);
	DENSITYL.fill( NN, NN, 0.0, 1, 1);
	self.postMessage({text: "UpdateProgress", value: 0});
	for ( var i = 1; i <= 3; i++ ) {
		RR = RANDOM();
		X[i] = 2 * RR - 1;
	}

	A = X.reduce(function (pv, cv) { 
		pv + Math.pow(cv,2); 
	},0);

	X.map(function ( cv ) { return cv / A; });
	X[4] = 1.0;
	var fractal_type = Icosa.settings.fractal_type;
	
	if ( fractal_type == "Icosa") {
		populateMatrices( ALPHA );	
	} else if ( fractal_type == "Octa" ) {
		populateMatricesOcta( ALPHA );
		fractal_length = 6;
	} else if ( fractal_type == "Para" ) {
		populateMatricesPara( ALPHA );
		fractal_length = 24;
	} else if ( fractal_type == "PlatonicCube" ) {
		populatePlatonicMatricesCube( ALPHA );
		fractal_length = 8;
	} else if ( fractal_type == "PlatonicDodeca" ) {
		populatePlatonicMatricesDodeca( ALPHA );
		fractal_length = 20;
	} else if ( fractal_type == "PlatonicIcosa" ) {
		populatePlatonicMatricesIcosa( ALPHA );
		fractal_length = 12;
	} else if ( fractal_type == "PlatonicOcta" ) {
		populatePlatonicMatricesOcta( ALPHA );
		fractal_length = 6;
	} else if ( fractal_type == "PlatonicTetra" ) {
		populatePlatonicMatricesTetra( ALPHA );
		fractal_length = 4;
	} else {
		alert("Don't know: " + fractal_type );
		return;
	}
	
	mainLoop(Icosa.settings.starty);
}
function mainLoop( starti ) {
	// Main Loop
	var percent = 10;
	self.postMessage({text: "UpdateProgress", value: percent});
	var nx,ny;
	for ( var i = 1; i <= NIT; i++ ) {
		RR = RANDOM();
		if ( i % Math.ceil( NIT / 100.0 ) == 0 ) {
			// Maybe do something?
			percent += 1;
			if (percent > 100) {
				percent = 11;
			}
			self.postMessage({text: "UpdateProgress", value: percent});
		}
		R = Math.ceil( fractal_length * RR );
		// Apply the selected matrix;
		  X1[1] = L[R][1][1] * X[1] + L[R][1][2] * X[2] + L[R][1][3] * X[3] + L[R][1][4];
	    X1[2] = L[R][2][1] * X[1] + L[R][2][2] * X[2] + L[R][2][3] * X[3] + L[R][2][4];
	    X1[3] = L[R][3][1] * X[1] + L[R][3][2] * X[2] + L[R][3][3] * X[3] + L[R][3][4];
	    A = 1.0 / Math.sqrt( X1[1]*X1[1] + X1[2] * X1[2]+ X1[3] * X1[3] );
	    // Normalize the first three components
	    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	    X[1] = X1[1] * A;
	    X[2] = X1[2] * A;
	    X[3] = X1[3] * A;
	    X[4] = 1.0;
	    if ( Icosa.settings.display_type == "Stereographic") {
	    	nx = X[1] / ( 1 - X[3] );
	    	ny = X[2] / ( 1 - X[3] );
	    	if ( Math.abs(nx) < Icosa.settings.xylimit && Math.abs(ny) < Icosa.settings.xylimit ) {
	    		nx = nx / Icosa.settings.xylimit;
	    		ny = ny / Icosa.settings.xylimit;
	    		M = Math.max( Math.ceil(( nx + 1.0) * NN / 2), 1 );
	    		N = Math.max( Math.ceil(( ny + 1.0) * NN / 2), 1 );
	    	}
	    } else {
	    	M = Math.max( Math.ceil((X[1] + 1.0) * NN / 2), 1 );
	    	N = Math.max( Math.ceil((X[2] + 1.0) * NN / 2), 1 );
	    }
	    
	   	DENSITY[M][N] = DENSITY[M][N] + 1;
	} // End Main Loop
	findMAXL(Icosa.settings.starty,1);
}
function findMAXL( starti,startj ) {
	var ts = +new Date();
	var now;
	var percent = 30;
	self.postMessage({text: "UpdateProgress", value: percent});
	MAXL = 0;
	for ( var i = starti; i <= Icosa.settings.endy; i++ ) {
		for ( var j = startj; j <= NN; j++ ) {
			DENSITYL[i][j] = Math.log10( DENSITY[i][j] );
			if ( DENSITYL[i][j] > MAXL ) {
				MAXL = DENSITYL[i][j];
			}

		}
		if ( Math.floor( NN / 2) == i) {
			percent += 40;
			self.postMessage({text: "UpdateProgress", value: percent});
		}
	}
	percent += 20;
	self.postMessage({text: "UpdateProgress", value: percent});
	for ( var i = starti; i <= Icosa.settings.endy; i++ ) {
		for ( var j = 1; j <= NN; j++ ) {
			DENSITYL[i][j] = DENSITYL[i][j] / MAXL;
		}
		if ( Math.floor( NN / 2) == i) {
			percent += 20;
			self.postMessage({text: "UpdateProgress", value: percent});
		}
	}	
	percent += 10;
	self.postMessage({text: "UpdateProgress", value: percent});
	self.postMessage({ text: 'Render', data: 
			{
				pixels: DENSITYL,
				width: NN+1,
				height: Icosa.settings.endy+1,
				sx: 1,
				sy: Icosa.settings.starty,

			}
	 });
}

